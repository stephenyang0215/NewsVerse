{"ast":null,"code":"import { getTimeAPI } from \"@/api/index\";\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null\n    };\n  },\n  computed: {\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    }\n  },\n  methods: {\n    async getTimeData() {\n      try {\n        const res = await getTimeAPI();\n        const localTime = new Date(res.dateTime);\n        this.hours = localTime.getHours();\n        this.minutes = localTime.getMinutes();\n        this.seconds = localTime.getSeconds();\n        console.log(\"TimeData\", this.time);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.seconds += 1;\n        if (this.seconds >= 60) {\n          this.seconds = 0;\n          this.minutes += 1;\n        }\n        if (this.minutes >= 60) {\n          this.minutes = 0;\n          this.hours += 1;\n        }\n      }, 1000);\n    }\n  },\n  mounted() {\n    this.getTimeData();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer); // 组件销毁时清除定时器\n  }\n};","map":{"version":3,"names":["getTimeAPI","data","seconds","minutes","hours","timer","computed","formattedTime","paddedMinutes","String","padStart","paddedSeconds","methods","getTimeData","res","localTime","Date","dateTime","getHours","getMinutes","getSeconds","console","log","time","error","startTimer","setInterval","mounted","beforeDestroy","clearInterval"],"sources":["src/components/BostonClock.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>波士顿当前时间</h2>\n    <p>{{ formattedTime }}</p>\n  </div>\n</template>\n\n<script>\nimport { getTimeAPI } from \"@/api/index\";\n\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null,\n    };\n  },\n  computed: {\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    },\n  },\n  methods: {\n    async getTimeData() {\n      try {\n        const res = await getTimeAPI();\n        const localTime = new Date(res.dateTime);\n        this.hours = localTime.getHours();\n        this.minutes = localTime.getMinutes();\n        this.seconds = localTime.getSeconds();\n        console.log(\"TimeData\", this.time);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.seconds += 1;\n\n        if (this.seconds >= 60) {\n          this.seconds = 0;\n          this.minutes += 1;\n        }\n\n        if (this.minutes >= 60) {\n          this.minutes = 0;\n          this.hours += 1;\n        }\n      }, 1000);\n    },\n  },\n  mounted() {\n    this.getTimeData();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer); // 组件销毁时清除定时器\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin: 0;\n}\n\np {\n  font-size: 24px;\n}\n</style>\n"],"mappings":"AAQA,SAAAA,UAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,KAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,MAAAC,aAAA,GAAAC,MAAA,MAAAN,OAAA,EAAAO,QAAA;MACA,MAAAC,aAAA,GAAAF,MAAA,MAAAP,OAAA,EAAAQ,QAAA;MACA,eAAAN,KAAA,IAAAI,aAAA,IAAAG,aAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,YAAA;MACA;QACA,MAAAC,GAAA,SAAAd,UAAA;QACA,MAAAe,SAAA,OAAAC,IAAA,CAAAF,GAAA,CAAAG,QAAA;QACA,KAAAb,KAAA,GAAAW,SAAA,CAAAG,QAAA;QACA,KAAAf,OAAA,GAAAY,SAAA,CAAAI,UAAA;QACA,KAAAjB,OAAA,GAAAa,SAAA,CAAAK,UAAA;QACAC,OAAA,CAAAC,GAAA,kBAAAC,IAAA;MACA,SAAAC,KAAA;QACAH,OAAA,CAAAG,KAAA,CAAAA,KAAA;MACA;IACA;IACAC,WAAA;MACA,KAAApB,KAAA,GAAAqB,WAAA;QACA,KAAAxB,OAAA;QAEA,SAAAA,OAAA;UACA,KAAAA,OAAA;UACA,KAAAC,OAAA;QACA;QAEA,SAAAA,OAAA;UACA,KAAAA,OAAA;UACA,KAAAC,KAAA;QACA;MACA;IACA;EACA;EACAuB,QAAA;IACA,KAAAd,WAAA;IACA,KAAAY,UAAA;EACA;EACAG,cAAA;IACAC,aAAA,MAAAxB,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}