{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [],\n      // 存储已选择的区域\n      largeSelection: null,\n      // 存储大区域的位置信息\n      isDrawing: false,\n      // 标记是否正在绘制\n      startX: 0,\n      startY: 0,\n      ctx: null,\n      // 画布上下文\n      isInLargeSelection: false // 标记是否在大区域内\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n\n    // 确保图片加载完毕后再处理\n    this.image.src = this.imageSrc; // 可以通过props传入图片路径\n    this.image.onload = this.onImageLoad;\n    this.image.onerror = this.onImageError; // 加载失败时的处理\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    },\n    initialSelections: {\n      type: Array,\n      default: () => []\n    }\n  },\n  methods: {\n    // 图片加载完毕后设置画布尺寸\n    onImageLoad() {\n      console.log(\"图片加载成功\"); // 打印日志以确认图片加载完成\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n      this.drawExistingSelections(); // 回显之前的区域\n    },\n    // 图片加载失败的处理\n    onImageError() {\n      console.error(\"图片加载失败\");\n    },\n    // 绘制所有已选区域\n    drawExistingSelections() {\n      if (this.initialSelections && this.initialSelections.length > 0) {\n        this.initialSelections.forEach(area => {\n          this.selection.push(area);\n        });\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n        this.selection.forEach(area => {\n          this.ctx.strokeStyle = \"blue\";\n          this.ctx.lineWidth = 2;\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n      }\n    },\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      // 如果点击的是大区域内，允许绘制小区域\n      if (this.largeSelection && this.isInsideLargeSelection(x, y)) {\n        this.isInLargeSelection = true;\n        this.startX = x;\n        this.startY = y;\n        this.isDrawing = true;\n      }\n    },\n    // 绘制选区\n    draw(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      const width = x - this.startX;\n      const height = y - this.startY;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0);\n\n      // 绘制大区域\n      if (this.largeSelection) {\n        this.ctx.strokeStyle = \"green\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.largeSelection.x, this.largeSelection.y, this.largeSelection.width, this.largeSelection.height);\n      }\n\n      // 绘制当前的小区域\n      if (this.isInLargeSelection) {\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      }\n\n      // 绘制之前已经选择的小区域\n      this.selection.forEach(area => {\n        this.ctx.strokeStyle = \"blue\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n    },\n    // 完成绘制选区\n    endDrawing(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      if (this.isInLargeSelection && this.largeSelection) {\n        const width = x - this.startX;\n        const height = y - this.startY;\n        this.selection.push({\n          x: this.startX,\n          y: this.startY,\n          width: width,\n          height: height\n        });\n        this.isDrawing = false;\n        this.isInLargeSelection = false;\n\n        // 清空画布并重新绘制所有区域\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n        this.ctx.strokeStyle = \"green\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.largeSelection.x, this.largeSelection.y, this.largeSelection.width, this.largeSelection.height);\n        this.selection.forEach(area => {\n          this.ctx.strokeStyle = \"blue\";\n          this.ctx.lineWidth = 2;\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n      }\n    },\n    // 检查是否在大区域内\n    isInsideLargeSelection(x, y) {\n      if (this.largeSelection && x >= this.largeSelection.x && y >= this.largeSelection.y && x <= this.largeSelection.x + this.largeSelection.width && y <= this.largeSelection.y + this.largeSelection.height) {\n        return true;\n      }\n      return false;\n    },\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    // 保存选中的区域\n    saveSelections() {\n      const selectionData = this.selection;\n      console.log(\"保存选中的区域:\", selectionData);\n    },\n    // 设置大区域（初次加载时或从后端回显数据时调用）\n    setLargeSelection(x, y, width, height) {\n      this.largeSelection = {\n        x,\n        y,\n        width,\n        height\n      };\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0);\n      this.ctx.strokeStyle = \"green\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(x, y, width, height);\n    }\n  }\n};","map":{"version":3,"names":["data","canvasWidth","canvasHeight","image","Image","selection","largeSelection","isDrawing","startX","startY","ctx","isInLargeSelection","mounted","$refs","canvas","getContext","src","imageSrc","onload","onImageLoad","onerror","onImageError","props","type","String","required","initialSelections","Array","default","methods","console","log","width","height","drawImage","drawExistingSelections","error","length","forEach","area","push","clearCanvas","strokeStyle","lineWidth","strokeRect","x","y","startDrawing","e","rect","getBoundingClientRect","clientX","left","clientY","top","isInsideLargeSelection","draw","endDrawing","clearRect","saveSelections","selectionData","setLargeSelection"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas\n      ref=\"canvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousedown=\"startDrawing\"\n      @mousemove=\"draw\"\n      @mouseup=\"endDrawing\"\n      @mouseleave=\"endDrawing\"\n      class=\"canvas\"\n    ></canvas>\n    <button @click=\"saveSelections\">保存选区</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [], // 存储已选择的区域\n      largeSelection: null, // 存储大区域的位置信息\n      isDrawing: false, // 标记是否正在绘制\n      startX: 0,\n      startY: 0,\n      ctx: null, // 画布上下文\n      isInLargeSelection: false, // 标记是否在大区域内\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n\n    // 确保图片加载完毕后再处理\n    this.image.src = this.imageSrc; // 可以通过props传入图片路径\n    this.image.onload = this.onImageLoad;\n    this.image.onerror = this.onImageError; // 加载失败时的处理\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n    initialSelections: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  methods: {\n    // 图片加载完毕后设置画布尺寸\n    onImageLoad() {\n      console.log(\"图片加载成功\"); // 打印日志以确认图片加载完成\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n      this.drawExistingSelections(); // 回显之前的区域\n    },\n\n    // 图片加载失败的处理\n    onImageError() {\n      console.error(\"图片加载失败\");\n    },\n\n    // 绘制所有已选区域\n    drawExistingSelections() {\n      if (this.initialSelections && this.initialSelections.length > 0) {\n        this.initialSelections.forEach((area) => {\n          this.selection.push(area);\n        });\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n        this.selection.forEach((area) => {\n          this.ctx.strokeStyle = \"blue\";\n          this.ctx.lineWidth = 2;\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n      }\n    },\n\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      // 如果点击的是大区域内，允许绘制小区域\n      if (this.largeSelection && this.isInsideLargeSelection(x, y)) {\n        this.isInLargeSelection = true;\n        this.startX = x;\n        this.startY = y;\n        this.isDrawing = true;\n      }\n    },\n\n    // 绘制选区\n    draw(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      const width = x - this.startX;\n      const height = y - this.startY;\n\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0);\n\n      // 绘制大区域\n      if (this.largeSelection) {\n        this.ctx.strokeStyle = \"green\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(\n          this.largeSelection.x,\n          this.largeSelection.y,\n          this.largeSelection.width,\n          this.largeSelection.height\n        );\n      }\n\n      // 绘制当前的小区域\n      if (this.isInLargeSelection) {\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      }\n\n      // 绘制之前已经选择的小区域\n      this.selection.forEach((area) => {\n        this.ctx.strokeStyle = \"blue\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n    },\n\n    // 完成绘制选区\n    endDrawing(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      if (this.isInLargeSelection && this.largeSelection) {\n        const width = x - this.startX;\n        const height = y - this.startY;\n\n        this.selection.push({\n          x: this.startX,\n          y: this.startY,\n          width: width,\n          height: height,\n        });\n\n        this.isDrawing = false;\n        this.isInLargeSelection = false;\n\n        // 清空画布并重新绘制所有区域\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n        this.ctx.strokeStyle = \"green\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(\n          this.largeSelection.x,\n          this.largeSelection.y,\n          this.largeSelection.width,\n          this.largeSelection.height\n        );\n        this.selection.forEach((area) => {\n          this.ctx.strokeStyle = \"blue\";\n          this.ctx.lineWidth = 2;\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n      }\n    },\n\n    // 检查是否在大区域内\n    isInsideLargeSelection(x, y) {\n      if (\n        this.largeSelection &&\n        x >= this.largeSelection.x &&\n        y >= this.largeSelection.y &&\n        x <= this.largeSelection.x + this.largeSelection.width &&\n        y <= this.largeSelection.y + this.largeSelection.height\n      ) {\n        return true;\n      }\n      return false;\n    },\n\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    // 保存选中的区域\n    saveSelections() {\n      const selectionData = this.selection;\n      console.log(\"保存选中的区域:\", selectionData);\n    },\n\n    // 设置大区域（初次加载时或从后端回显数据时调用）\n    setLargeSelection(x, y, width, height) {\n      this.largeSelection = { x, y, width, height };\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0);\n      this.ctx.strokeStyle = \"green\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(x, y, width, height);\n    },\n  },\n};\n</script>\n\n<style scoped>\ncanvas {\n  border: 1px solid #000;\n  cursor: crosshair;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}