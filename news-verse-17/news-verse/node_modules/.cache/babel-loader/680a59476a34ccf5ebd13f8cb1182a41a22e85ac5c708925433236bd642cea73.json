{"ast":null,"code":"export default {\n  props: {\n    imageSrc: String // 接收父组件传来的图片URL\n  },\n  data() {\n    return {\n      img: null,\n      selection: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      },\n      // 初始选中范围\n      isDragging: false,\n      offsetX: 0,\n      offsetY: 0\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    }\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection; // 设置画布大小和动态初始选区\n      this.img.src = src;\n    },\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n      this.selection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5\n      };\n      this.drawCanvas();\n    },\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0); // 绘制图片\n      }\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(this.selection.x, this.selection.y, this.selection.width, this.selection.height);\n    },\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      if (x > this.selection.x && x < this.selection.x + this.selection.width && y > this.selection.y && y < this.selection.y + this.selection.height) {\n        this.isDragging = true;\n        this.offsetX = x - this.selection.x;\n        this.offsetY = y - this.selection.y;\n      }\n    },\n    onMouseMove(event) {\n      if (!this.isDragging) return;\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      this.selection.x = x - this.offsetX;\n      this.selection.y = y - this.offsetY;\n      this.drawCanvas();\n    },\n    onMouseUp() {\n      this.isDragging = false;\n    },\n    sendSelection() {\n      const selectionData = {\n        x: this.selection.x,\n        y: this.selection.y,\n        width: this.selection.width,\n        height: this.selection.height\n      };\n      this.$emit(\"sendSelection\", selectionData); // 将选区信息发送给父组件\n    }\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","String","data","img","selection","x","y","width","height","isDragging","offsetX","offsetY","watch","newSrc","loadImage","methods","src","Image","onload","setCanvasAndSelection","canvas","$refs","drawCanvas","ctx","getContext","clearRect","drawImage","strokeStyle","lineWidth","strokeRect","onMouseDown","event","canvasRect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","onMouseUp","sendSelection","selectionData","$emit","mounted"],"sources":["src/components/CanvasTest.vue"],"sourcesContent":["<template>\r\n  <div class=\"image-cropper\">\r\n    <canvas\r\n      ref=\"canvas\"\r\n      @mousedown=\"onMouseDown\"\r\n      @mouseup=\"onMouseUp\"\r\n      @mousemove=\"onMouseMove\"\r\n    ></canvas>\r\n    <button @click=\"sendSelection\">发送选中范围</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    imageSrc: String, // 接收父组件传来的图片URL\r\n  },\r\n  data() {\r\n    return {\r\n      img: null,\r\n      selection: { x: 0, y: 0, width: 0, height: 0 }, // 初始选中范围\r\n      isDragging: false,\r\n      offsetX: 0,\r\n      offsetY: 0,\r\n    };\r\n  },\r\n  watch: {\r\n    imageSrc(newSrc) {\r\n      if (newSrc) {\r\n        this.loadImage(newSrc);\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    loadImage(src) {\r\n      this.img = new Image();\r\n      this.img.onload = this.setCanvasAndSelection; // 设置画布大小和动态初始选区\r\n      this.img.src = src;\r\n    },\r\n\r\n    setCanvasAndSelection() {\r\n      const canvas = this.$refs.canvas;\r\n      canvas.width = this.img.width;\r\n      canvas.height = this.img.height;\r\n\r\n      this.selection = {\r\n        x: this.img.width * 0.25,\r\n        y: this.img.height * 0.25,\r\n        width: this.img.width * 0.5,\r\n        height: this.img.height * 0.5,\r\n      };\r\n\r\n      this.drawCanvas();\r\n    },\r\n\r\n    drawCanvas() {\r\n      const canvas = this.$refs.canvas;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      if (this.img) {\r\n        ctx.drawImage(this.img, 0, 0); // 绘制图片\r\n      }\r\n      ctx.strokeStyle = \"red\";\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeRect(\r\n        this.selection.x,\r\n        this.selection.y,\r\n        this.selection.width,\r\n        this.selection.height\r\n      );\r\n    },\r\n\r\n    onMouseDown(event) {\r\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\r\n      const x = event.clientX - canvasRect.left;\r\n      const y = event.clientY - canvasRect.top;\r\n      if (\r\n        x > this.selection.x &&\r\n        x < this.selection.x + this.selection.width &&\r\n        y > this.selection.y &&\r\n        y < this.selection.y + this.selection.height\r\n      ) {\r\n        this.isDragging = true;\r\n        this.offsetX = x - this.selection.x;\r\n        this.offsetY = y - this.selection.y;\r\n      }\r\n    },\r\n\r\n    onMouseMove(event) {\r\n      if (!this.isDragging) return;\r\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\r\n      const x = event.clientX - canvasRect.left;\r\n      const y = event.clientY - canvasRect.top;\r\n      this.selection.x = x - this.offsetX;\r\n      this.selection.y = y - this.offsetY;\r\n      this.drawCanvas();\r\n    },\r\n\r\n    onMouseUp() {\r\n      this.isDragging = false;\r\n    },\r\n\r\n    sendSelection() {\r\n      const selectionData = {\r\n        x: this.selection.x,\r\n        y: this.selection.y,\r\n        width: this.selection.width,\r\n        height: this.selection.height,\r\n      };\r\n      this.$emit(\"sendSelection\", selectionData); // 将选区信息发送给父组件\r\n    },\r\n  },\r\n  mounted() {\r\n    if (this.imageSrc) {\r\n      this.loadImage(this.imageSrc);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.image-cropper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\ncanvas {\r\n  border: 1px solid #000;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}