{"ast":null,"code":"export default {\n  props: {\n    imageSrc: String\n  },\n  data() {\n    return {\n      img: null,\n      mainSelection: {\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100\n      },\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    }\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n\n      // 初始化选区\n      this.mainSelection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5\n      };\n      this.drawCanvas();\n    },\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(ctx);\n\n      // 绘制选区\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(this.mainSelection.x, this.mainSelection.y, this.mainSelection.width, this.mainSelection.height);\n\n      // 绘制控制点\n      this.drawControlPoints(ctx);\n    },\n    // 绘制灰色遮罩层\n    drawOverlay(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.mainSelection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; // 半透明的灰色\n      ctx.fillRect(0, 0, ctx.canvas.width, y); // 选区上方\n      ctx.fillRect(0, y + height, ctx.canvas.width, ctx.canvas.height - (y + height)); // 选区下方\n      ctx.fillRect(0, y, x, height); // 选区左侧\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height); // 选区右侧\n    },\n    drawControlPoints(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.mainSelection;\n      const controlPoints = [{\n        x: x,\n        y: y\n      }, {\n        x: x + width,\n        y: y\n      }, {\n        x: x,\n        y: y + height\n      }, {\n        x: x + width,\n        y: y + height\n      }];\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach(point => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 检查是否点击了控制点\n      const clickedCorner = this.getClickedCorner(x, y);\n      if (clickedCorner !== null) {\n        this.isResizing = true;\n        this.resizeCorner = clickedCorner;\n      }\n    },\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 仅更新缩放\n      this.resizeSelection(x, y);\n      this.drawCanvas();\n    },\n    onMouseUp() {\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n    getClickedCorner(x, y) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = this.mainSelection;\n      const corners = [{\n        x: selX,\n        y: selY\n      }, {\n        x: selX + width,\n        y: selY\n      }, {\n        x: selX,\n        y: selY + height\n      }, {\n        x: selX + width,\n        y: selY + height\n      }];\n      return corners.findIndex(corner => Math.abs(corner.x - x) < this.controlSize && Math.abs(corner.y - y) < this.controlSize);\n    },\n    resizeSelection(x, y) {\n      const {\n        x: selX,\n        y: selY\n      } = this.mainSelection;\n      switch (this.resizeCorner) {\n        case 0:\n          // 左上角\n          this.mainSelection.width += this.mainSelection.x - x;\n          this.mainSelection.height += this.mainSelection.y - y;\n          this.mainSelection.x = x;\n          this.mainSelection.y = y;\n          break;\n        case 1:\n          // 右上角\n          this.mainSelection.width = x - selX;\n          this.mainSelection.height += selY - y;\n          this.mainSelection.y = y;\n          break;\n        case 2:\n          // 左下角\n          this.mainSelection.width += selX - x;\n          this.mainSelection.height = y - selY;\n          this.mainSelection.x = x;\n          break;\n        case 3:\n          // 右下角\n          this.mainSelection.width = x - selX;\n          this.mainSelection.height = y - selY;\n          break;\n      }\n\n      // 限制最小尺寸\n      this.mainSelection.width = Math.max(20, this.mainSelection.width);\n      this.mainSelection.height = Math.max(20, this.mainSelection.height);\n    },\n    sendSelection() {\n      const selectionData = {\n        x: this.mainSelection.x,\n        y: this.mainSelection.y,\n        width: this.mainSelection.width,\n        height: this.mainSelection.height\n      };\n      this.$emit(\"sendSelection\", selectionData);\n    }\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","String","data","img","mainSelection","x","y","width","height","isResizing","resizeCorner","controlSize","watch","newSrc","loadImage","methods","src","Image","onload","setCanvasAndSelection","canvas","$refs","drawCanvas","ctx","getContext","clearRect","drawImage","drawOverlay","strokeStyle","lineWidth","strokeRect","drawControlPoints","fillStyle","fillRect","controlPoints","forEach","point","beginPath","arc","Math","PI","fill","onMouseDown","event","canvasRect","getBoundingClientRect","clientX","left","clientY","top","clickedCorner","getClickedCorner","onMouseMove","resizeSelection","onMouseUp","selX","selY","corners","findIndex","corner","abs","max","sendSelection","selectionData","$emit","mounted"],"sources":["src/components/CanvasTest.vue"],"sourcesContent":["<template>\n  <div class=\"image-cropper\">\n    <canvas\n      ref=\"canvas\"\n      @mousedown=\"onMouseDown\"\n      @mouseup=\"onMouseUp\"\n      @mousemove=\"onMouseMove\"\n    ></canvas>\n    <button @click=\"sendSelection\">发送选中范围</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: String,\n  },\n  data() {\n    return {\n      img: null,\n      mainSelection: { x: 50, y: 50, width: 100, height: 100 },\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    },\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n\n      // 初始化选区\n      this.mainSelection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5,\n      };\n\n      this.drawCanvas();\n    },\n\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(ctx);\n\n      // 绘制选区\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(\n        this.mainSelection.x,\n        this.mainSelection.y,\n        this.mainSelection.width,\n        this.mainSelection.height\n      );\n\n      // 绘制控制点\n      this.drawControlPoints(ctx);\n    },\n\n    // 绘制灰色遮罩层\n    drawOverlay(ctx) {\n      const { x, y, width, height } = this.mainSelection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; // 半透明的灰色\n      ctx.fillRect(0, 0, ctx.canvas.width, y); // 选区上方\n      ctx.fillRect(\n        0,\n        y + height,\n        ctx.canvas.width,\n        ctx.canvas.height - (y + height)\n      ); // 选区下方\n      ctx.fillRect(0, y, x, height); // 选区左侧\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height); // 选区右侧\n    },\n\n    drawControlPoints(ctx) {\n      const { x, y, width, height } = this.mainSelection;\n      const controlPoints = [\n        { x: x, y: y },\n        { x: x + width, y: y },\n        { x: x, y: y + height },\n        { x: x + width, y: y + height },\n      ];\n\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach((point) => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 检查是否点击了控制点\n      const clickedCorner = this.getClickedCorner(x, y);\n      if (clickedCorner !== null) {\n        this.isResizing = true;\n        this.resizeCorner = clickedCorner;\n      }\n    },\n\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 仅更新缩放\n      this.resizeSelection(x, y);\n      this.drawCanvas();\n    },\n\n    onMouseUp() {\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n\n    getClickedCorner(x, y) {\n      const { x: selX, y: selY, width, height } = this.mainSelection;\n      const corners = [\n        { x: selX, y: selY },\n        { x: selX + width, y: selY },\n        { x: selX, y: selY + height },\n        { x: selX + width, y: selY + height },\n      ];\n\n      return corners.findIndex(\n        (corner) =>\n          Math.abs(corner.x - x) < this.controlSize &&\n          Math.abs(corner.y - y) < this.controlSize\n      );\n    },\n\n    resizeSelection(x, y) {\n      const { x: selX, y: selY } = this.mainSelection;\n      switch (this.resizeCorner) {\n        case 0: // 左上角\n          this.mainSelection.width += this.mainSelection.x - x;\n          this.mainSelection.height += this.mainSelection.y - y;\n          this.mainSelection.x = x;\n          this.mainSelection.y = y;\n          break;\n        case 1: // 右上角\n          this.mainSelection.width = x - selX;\n          this.mainSelection.height += selY - y;\n          this.mainSelection.y = y;\n          break;\n        case 2: // 左下角\n          this.mainSelection.width += selX - x;\n          this.mainSelection.height = y - selY;\n          this.mainSelection.x = x;\n          break;\n        case 3: // 右下角\n          this.mainSelection.width = x - selX;\n          this.mainSelection.height = y - selY;\n          break;\n      }\n\n      // 限制最小尺寸\n      this.mainSelection.width = Math.max(20, this.mainSelection.width);\n      this.mainSelection.height = Math.max(20, this.mainSelection.height);\n    },\n\n    sendSelection() {\n      const selectionData = {\n        x: this.mainSelection.x,\n        y: this.mainSelection.y,\n        width: this.mainSelection.width,\n        height: this.mainSelection.height,\n      };\n      this.$emit(\"sendSelection\", selectionData);\n    },\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.image-cropper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\ncanvas {\n  border: 1px solid #000;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}