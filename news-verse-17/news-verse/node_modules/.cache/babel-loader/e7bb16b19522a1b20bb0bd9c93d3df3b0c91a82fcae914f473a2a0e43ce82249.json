{"ast":null,"code":"import { getweatherAPI } from \"@/api/index\";\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null,\n      offset: 0 // 与UTC的偏移时间（秒）\n    };\n  },\n  computed: {\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    }\n  },\n  methods: {\n    // fetchTime() {\n    //   axios\n    //     .get(\"https://worldtimeapi.org/api/timezone/America/New_York\")\n    //     .then((response) => {\n    //       const utcDate = new Date(response.data.utc_datetime);\n    //       this.offset = parseInt(response.data.utc_offset); // 获取当前时区的偏移量（秒）\n    //       const localTime = new Date(utcDate.getTime() + this.offset * 1000); // 调整为本地时间\n    //       // 设置时间\n    //       this.hours = localTime.getUTCHours(); // 使用 UTC 小时\n    //       this.minutes = localTime.getUTCMinutes(); // 使用 UTC 分钟\n    //       this.seconds = localTime.getUTCSeconds(); // 使用 UTC 秒\n    //     })\n    //     .catch((error) => {\n    //       console.error(\"Error fetching time:\", error);\n    //     });\n    // },\n    async getTimeData() {\n      try {\n        const res = await getTimeAPI();\n        const utcDate = new Date(res.data.utc_datetime);\n        this.offset = parseInt(res.data.utc_offset); // 获取当前时区的偏移量（秒）\n        const localTime = new Date(utcDate.getTime() + this.offset * 1000); // 调整为本地时间\n        // 设置时间\n        this.hours = localTime.getUTCHours(); // 使用 UTC 小时\n        this.minutes = localTime.getUTCMinutes(); // 使用 UTC 分钟\n        this.seconds = localTime.getUTCSeconds(); // 使用 UTC 秒\n        console.log(\"TimeData\", this.time);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.seconds += 1;\n        if (this.seconds >= 60) {\n          this.seconds = 0;\n          this.minutes += 1;\n        }\n        if (this.minutes >= 60) {\n          this.minutes = 0;\n          this.hours += 1;\n        }\n      }, 1000);\n    }\n  },\n  mounted() {\n    this.getTimeData();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer); // 组件销毁时清除定时器\n  }\n};","map":{"version":3,"names":["getweatherAPI","data","seconds","minutes","hours","timer","offset","computed","formattedTime","paddedMinutes","String","padStart","paddedSeconds","methods","getTimeData","res","getTimeAPI","utcDate","Date","utc_datetime","parseInt","utc_offset","localTime","getTime","getUTCHours","getUTCMinutes","getUTCSeconds","console","log","time","error","startTimer","setInterval","mounted","beforeDestroy","clearInterval"],"sources":["src/components/BostonClock.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>波士顿当前时间</h2>\n    <p>{{ formattedTime }}</p>\n  </div>\n</template>\n\n<script>\nimport { getweatherAPI } from \"@/api/index\";\n\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null,\n      offset: 0, // 与UTC的偏移时间（秒）\n    };\n  },\n  computed: {\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    },\n  },\n  methods: {\n    // fetchTime() {\n    //   axios\n    //     .get(\"https://worldtimeapi.org/api/timezone/America/New_York\")\n    //     .then((response) => {\n    //       const utcDate = new Date(response.data.utc_datetime);\n    //       this.offset = parseInt(response.data.utc_offset); // 获取当前时区的偏移量（秒）\n    //       const localTime = new Date(utcDate.getTime() + this.offset * 1000); // 调整为本地时间\n    //       // 设置时间\n    //       this.hours = localTime.getUTCHours(); // 使用 UTC 小时\n    //       this.minutes = localTime.getUTCMinutes(); // 使用 UTC 分钟\n    //       this.seconds = localTime.getUTCSeconds(); // 使用 UTC 秒\n    //     })\n    //     .catch((error) => {\n    //       console.error(\"Error fetching time:\", error);\n    //     });\n    // },\n    async getTimeData() {\n      try {\n        const res = await getTimeAPI();\n        const utcDate = new Date(res.data.utc_datetime);\n        this.offset = parseInt(res.data.utc_offset); // 获取当前时区的偏移量（秒）\n        const localTime = new Date(utcDate.getTime() + this.offset * 1000); // 调整为本地时间\n        // 设置时间\n        this.hours = localTime.getUTCHours(); // 使用 UTC 小时\n        this.minutes = localTime.getUTCMinutes(); // 使用 UTC 分钟\n        this.seconds = localTime.getUTCSeconds(); // 使用 UTC 秒\n        console.log(\"TimeData\", this.time);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.seconds += 1;\n\n        if (this.seconds >= 60) {\n          this.seconds = 0;\n          this.minutes += 1;\n        }\n\n        if (this.minutes >= 60) {\n          this.minutes = 0;\n          this.hours += 1;\n        }\n      }, 1000);\n    },\n  },\n  mounted() {\n    this.getTimeData();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer); // 组件销毁时清除定时器\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin: 0;\n}\n\np {\n  font-size: 24px;\n}\n</style>\n"],"mappings":"AAQA,SAAAA,aAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,KAAA;MACAC,KAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,MAAAC,aAAA,GAAAC,MAAA,MAAAP,OAAA,EAAAQ,QAAA;MACA,MAAAC,aAAA,GAAAF,MAAA,MAAAR,OAAA,EAAAS,QAAA;MACA,eAAAP,KAAA,IAAAK,aAAA,IAAAG,aAAA;IACA;EACA;EACAC,OAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAAC,YAAA;MACA;QACA,MAAAC,GAAA,SAAAC,UAAA;QACA,MAAAC,OAAA,OAAAC,IAAA,CAAAH,GAAA,CAAAd,IAAA,CAAAkB,YAAA;QACA,KAAAb,MAAA,GAAAc,QAAA,CAAAL,GAAA,CAAAd,IAAA,CAAAoB,UAAA;QACA,MAAAC,SAAA,OAAAJ,IAAA,CAAAD,OAAA,CAAAM,OAAA,UAAAjB,MAAA;QACA;QACA,KAAAF,KAAA,GAAAkB,SAAA,CAAAE,WAAA;QACA,KAAArB,OAAA,GAAAmB,SAAA,CAAAG,aAAA;QACA,KAAAvB,OAAA,GAAAoB,SAAA,CAAAI,aAAA;QACAC,OAAA,CAAAC,GAAA,kBAAAC,IAAA;MACA,SAAAC,KAAA;QACAH,OAAA,CAAAG,KAAA,CAAAA,KAAA;MACA;IACA;IACAC,WAAA;MACA,KAAA1B,KAAA,GAAA2B,WAAA;QACA,KAAA9B,OAAA;QAEA,SAAAA,OAAA;UACA,KAAAA,OAAA;UACA,KAAAC,OAAA;QACA;QAEA,SAAAA,OAAA;UACA,KAAAA,OAAA;UACA,KAAAC,KAAA;QACA;MACA;IACA;EACA;EACA6B,QAAA;IACA,KAAAnB,WAAA;IACA,KAAAiB,UAAA;EACA;EACAG,cAAA;IACAC,aAAA,MAAA9B,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}