{"ast":null,"code":"import { getTimeAPI } from \"@/api/index\";\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null,\n      currentDate: new Date(),\n      timeLoading: false\n    };\n  },\n  computed: {\n    formattedDate() {\n      const options = {\n        year: \"numeric\",\n        month: \"long\",\n        weekday: \"long\"\n      };\n      return this.currentDate.toLocaleDateString(\"en-US\", options);\n    },\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    }\n  },\n  methods: {\n    async getTimeData() {\n      this.timeLoading = true;\n      try {\n        const res = await getTimeAPI();\n        const localTime = new Date(res.dateTime);\n        this.hours = localTime.getHours();\n        this.minutes = localTime.getMinutes();\n        this.seconds = localTime.getSeconds();\n        this.currentDate = localTime;\n        this.timeLoading = false;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      // 获取当前的本地时间戳（毫秒）\n      const startTime = Date.now();\n\n      // 初始设置，基于 getTimeAPI 获取的时间\n      this.getTimeData();\n      this.timer = setInterval(() => {\n        // 获取当前时间的偏差\n        const elapsedTime = Date.now() - startTime;\n\n        // 从 `elapsedTime` 计算出秒数、分钟数、小时数\n        const totalSeconds = Math.floor(elapsedTime / 1000) + (this.seconds + this.minutes * 60 + this.hours * 3600);\n\n        // 重新计算当前时间\n        this.seconds = totalSeconds % 60;\n        this.minutes = Math.floor(totalSeconds / 60) % 60;\n        this.hours = Math.floor(totalSeconds / 3600);\n\n        // 每隔一定时间重新从接口获取一次时间来同步\n        if (elapsedTime >= 60000) {\n          // 例如每分钟同步一次\n          this.getTimeData();\n          this.startTime = Date.now(); // 重置起始时间\n        }\n      }, 1000);\n    }\n  },\n  mounted() {\n    this.getTimeData();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  }\n};","map":{"version":3,"names":["getTimeAPI","data","seconds","minutes","hours","timer","currentDate","Date","timeLoading","computed","formattedDate","options","year","month","weekday","toLocaleDateString","formattedTime","paddedMinutes","String","padStart","paddedSeconds","methods","getTimeData","res","localTime","dateTime","getHours","getMinutes","getSeconds","error","console","startTimer","startTime","now","setInterval","elapsedTime","totalSeconds","Math","floor","mounted","beforeDestroy","clearInterval"],"sources":["src/components/BostonClock.vue"],"sourcesContent":["<template>\n  <div class=\"time-container\">\n    <div v-if=\"timeLoading\">loading...</div>\n    <div v-else class=\"date-info\">\n      <div class=\"weatherCity\">Boston</div>\n      <h2>{{ formattedDate }}</h2>\n      <h3>{{ formattedTime }}</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getTimeAPI } from \"@/api/index\";\n\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null,\n      currentDate: new Date(),\n      timeLoading: false,\n    };\n  },\n  computed: {\n    formattedDate() {\n      const options = { year: \"numeric\", month: \"long\", weekday: \"long\" };\n      return this.currentDate.toLocaleDateString(\"en-US\", options);\n    },\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    },\n  },\n  methods: {\n    async getTimeData() {\n      this.timeLoading = true;\n      try {\n        const res = await getTimeAPI();\n        const localTime = new Date(res.dateTime);\n        this.hours = localTime.getHours();\n        this.minutes = localTime.getMinutes();\n        this.seconds = localTime.getSeconds();\n        this.currentDate = localTime;\n        this.timeLoading = false;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      // 获取当前的本地时间戳（毫秒）\n      const startTime = Date.now();\n\n      // 初始设置，基于 getTimeAPI 获取的时间\n      this.getTimeData();\n\n      this.timer = setInterval(() => {\n        // 获取当前时间的偏差\n        const elapsedTime = Date.now() - startTime;\n\n        // 从 `elapsedTime` 计算出秒数、分钟数、小时数\n        const totalSeconds =\n          Math.floor(elapsedTime / 1000) +\n          (this.seconds + this.minutes * 60 + this.hours * 3600);\n\n        // 重新计算当前时间\n        this.seconds = totalSeconds % 60;\n        this.minutes = Math.floor(totalSeconds / 60) % 60;\n        this.hours = Math.floor(totalSeconds / 3600);\n\n        // 每隔一定时间重新从接口获取一次时间来同步\n        if (elapsedTime >= 60000) {\n          // 例如每分钟同步一次\n          this.getTimeData();\n          this.startTime = Date.now(); // 重置起始时间\n        }\n      }, 1000);\n    },\n  },\n  mounted() {\n    this.getTimeData();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n};\n</script>\n\n<style scoped>\n.time-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-family: \"Arial\", sans-serif;\n  background-color: #b7e4c7;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.date-info {\n  text-align: center;\n}\n\n.weatherCity {\n  color: rgb(0, 27, 160);\n  border-bottom: 1px solid rgb(0, 27, 160);\n}\n\nh2 {\n  margin: 0;\n  font-size: 24px;\n  color: #333;\n}\n\nh3 {\n  margin: 0;\n  font-size: 20px;\n  color: #666;\n}\n</style>\n"],"mappings":"AAYA,SAAAA,UAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,KAAA;MACAC,KAAA;MACAC,WAAA,MAAAC,IAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,MAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,OAAA;MAAA;MACA,YAAAR,WAAA,CAAAS,kBAAA,UAAAJ,OAAA;IACA;IACAK,cAAA;MACA,MAAAC,aAAA,GAAAC,MAAA,MAAAf,OAAA,EAAAgB,QAAA;MACA,MAAAC,aAAA,GAAAF,MAAA,MAAAhB,OAAA,EAAAiB,QAAA;MACA,eAAAf,KAAA,IAAAa,aAAA,IAAAG,aAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,YAAA;MACA,KAAAd,WAAA;MACA;QACA,MAAAe,GAAA,SAAAvB,UAAA;QACA,MAAAwB,SAAA,OAAAjB,IAAA,CAAAgB,GAAA,CAAAE,QAAA;QACA,KAAArB,KAAA,GAAAoB,SAAA,CAAAE,QAAA;QACA,KAAAvB,OAAA,GAAAqB,SAAA,CAAAG,UAAA;QACA,KAAAzB,OAAA,GAAAsB,SAAA,CAAAI,UAAA;QACA,KAAAtB,WAAA,GAAAkB,SAAA;QACA,KAAAhB,WAAA;MACA,SAAAqB,KAAA;QACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA;MACA;IACA;IACAE,WAAA;MACA;MACA,MAAAC,SAAA,GAAAzB,IAAA,CAAA0B,GAAA;;MAEA;MACA,KAAAX,WAAA;MAEA,KAAAjB,KAAA,GAAA6B,WAAA;QACA;QACA,MAAAC,WAAA,GAAA5B,IAAA,CAAA0B,GAAA,KAAAD,SAAA;;QAEA;QACA,MAAAI,YAAA,GACAC,IAAA,CAAAC,KAAA,CAAAH,WAAA,YACA,KAAAjC,OAAA,QAAAC,OAAA,aAAAC,KAAA;;QAEA;QACA,KAAAF,OAAA,GAAAkC,YAAA;QACA,KAAAjC,OAAA,GAAAkC,IAAA,CAAAC,KAAA,CAAAF,YAAA;QACA,KAAAhC,KAAA,GAAAiC,IAAA,CAAAC,KAAA,CAAAF,YAAA;;QAEA;QACA,IAAAD,WAAA;UACA;UACA,KAAAb,WAAA;UACA,KAAAU,SAAA,GAAAzB,IAAA,CAAA0B,GAAA;QACA;MACA;IACA;EACA;EACAM,QAAA;IACA,KAAAjB,WAAA;IACA,KAAAS,UAAA;EACA;EACAS,cAAA;IACAC,aAAA,MAAApC,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}