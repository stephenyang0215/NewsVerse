{"ast":null,"code":"import { getTimeAPI } from \"@/api/index\";\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null,\n      currentDate: new Date(),\n      timeLoading: false\n    };\n  },\n  computed: {\n    formattedDate() {\n      const options = {\n        year: \"numeric\",\n        month: \"long\",\n        weekday: \"long\"\n      };\n      return this.currentDate.toLocaleDateString(\"en-US\", options);\n    },\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    }\n  },\n  methods: {\n    async getTimeData() {\n      this.timeLoading = true;\n      try {\n        const res = await getTimeAPI();\n        const localTime = new Date(res.dateTime);\n        this.hours = localTime.getHours();\n        this.minutes = localTime.getMinutes();\n        this.seconds = localTime.getSeconds();\n        this.currentDate = localTime; // 更新当前日期\n        this.timeLoading = false;\n        console.log(\"TimeData\", this.time);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.seconds += 1;\n        if (this.seconds >= 60) {\n          this.seconds = 0;\n          this.minutes += 1;\n        }\n        if (this.minutes >= 60) {\n          this.minutes = 0;\n          this.hours += 1;\n        }\n      }, 1000);\n    }\n  },\n  mounted() {\n    this.getTimeData();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer); // 组件销毁时清除定时器\n  }\n};","map":{"version":3,"names":["getTimeAPI","data","seconds","minutes","hours","timer","currentDate","Date","timeLoading","computed","formattedDate","options","year","month","weekday","toLocaleDateString","formattedTime","paddedMinutes","String","padStart","paddedSeconds","methods","getTimeData","res","localTime","dateTime","getHours","getMinutes","getSeconds","console","log","time","error","startTimer","setInterval","mounted","beforeDestroy","clearInterval"],"sources":["src/components/BostonClock.vue"],"sourcesContent":["<template>\n  <div class=\"time-container\">\n    <div v-if=\"timeLoading\">加载中...</div>\n    <div v-else class=\"date-info\">\n      <div class=\"weatherCity\">Boston</div>\n      <h2>{{ formattedDate }}</h2>\n      <h3>{{ formattedTime }}</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getTimeAPI } from \"@/api/index\";\n\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null,\n      currentDate: new Date(),\n      timeLoading: false,\n    };\n  },\n  computed: {\n    formattedDate() {\n      const options = { year: \"numeric\", month: \"long\", weekday: \"long\" };\n      return this.currentDate.toLocaleDateString(\"en-US\", options);\n    },\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    },\n  },\n  methods: {\n    async getTimeData() {\n      this.timeLoading = true;\n      try {\n        const res = await getTimeAPI();\n        const localTime = new Date(res.dateTime);\n        this.hours = localTime.getHours();\n        this.minutes = localTime.getMinutes();\n        this.seconds = localTime.getSeconds();\n        this.currentDate = localTime; // 更新当前日期\n        this.timeLoading = false;\n        console.log(\"TimeData\", this.time);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.seconds += 1;\n\n        if (this.seconds >= 60) {\n          this.seconds = 0;\n          this.minutes += 1;\n        }\n\n        if (this.minutes >= 60) {\n          this.minutes = 0;\n          this.hours += 1;\n        }\n      }, 1000);\n    },\n  },\n  mounted() {\n    this.getTimeData();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer); // 组件销毁时清除定时器\n  },\n};\n</script>\n\n<style scoped>\n.time-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-family: \"Arial\", sans-serif;\n  background-color: #f5f5f5;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.date-info {\n  text-align: center;\n}\n\n.weatherCity {\n  color: rgb(0, 27, 160);\n  border-bottom: 1px solid rgb(0, 27, 160);\n}\n\nh2 {\n  margin: 0;\n  font-size: 24px;\n  color: #333;\n}\n\nh3 {\n  margin: 0;\n  font-size: 20px;\n  color: #666;\n}\n</style>\n"],"mappings":"AAYA,SAAAA,UAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,KAAA;MACAC,KAAA;MACAC,WAAA,MAAAC,IAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,MAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,OAAA;MAAA;MACA,YAAAR,WAAA,CAAAS,kBAAA,UAAAJ,OAAA;IACA;IACAK,cAAA;MACA,MAAAC,aAAA,GAAAC,MAAA,MAAAf,OAAA,EAAAgB,QAAA;MACA,MAAAC,aAAA,GAAAF,MAAA,MAAAhB,OAAA,EAAAiB,QAAA;MACA,eAAAf,KAAA,IAAAa,aAAA,IAAAG,aAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,YAAA;MACA,KAAAd,WAAA;MACA;QACA,MAAAe,GAAA,SAAAvB,UAAA;QACA,MAAAwB,SAAA,OAAAjB,IAAA,CAAAgB,GAAA,CAAAE,QAAA;QACA,KAAArB,KAAA,GAAAoB,SAAA,CAAAE,QAAA;QACA,KAAAvB,OAAA,GAAAqB,SAAA,CAAAG,UAAA;QACA,KAAAzB,OAAA,GAAAsB,SAAA,CAAAI,UAAA;QACA,KAAAtB,WAAA,GAAAkB,SAAA;QACA,KAAAhB,WAAA;QACAqB,OAAA,CAAAC,GAAA,kBAAAC,IAAA;MACA,SAAAC,KAAA;QACAH,OAAA,CAAAG,KAAA,CAAAA,KAAA;MACA;IACA;IACAC,WAAA;MACA,KAAA5B,KAAA,GAAA6B,WAAA;QACA,KAAAhC,OAAA;QAEA,SAAAA,OAAA;UACA,KAAAA,OAAA;UACA,KAAAC,OAAA;QACA;QAEA,SAAAA,OAAA;UACA,KAAAA,OAAA;UACA,KAAAC,KAAA;QACA;MACA;IACA;EACA;EACA+B,QAAA;IACA,KAAAb,WAAA;IACA,KAAAW,UAAA;EACA;EACAG,cAAA;IACAC,aAAA,MAAAhC,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}