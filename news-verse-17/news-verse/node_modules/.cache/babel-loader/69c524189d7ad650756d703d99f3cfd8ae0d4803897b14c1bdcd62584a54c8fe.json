{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [],\n      // 存储所有选区\n      isDrawing: false,\n      // 标记是否正在绘制\n      startX: 0,\n      startY: 0,\n      isResizing: false,\n      // 是否正在缩放\n      isDragging: false,\n      // 是否正在拖拽\n      currentSelection: null,\n      // 当前选中的区域\n      draggingOffsetX: 0,\n      draggingOffsetY: 0,\n      ctx: null,\n      // 画布上下文\n      resizeHandleSize: 10,\n      // 缩放手柄大小\n      dragHandleSize: 10 // 拖拽手柄大小\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\"; // 可以通过props传入图片路径\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n    },\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n      this.isDrawing = true;\n    },\n    // 绘制选区\n    draw(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      const width = endX - this.startX;\n      const height = endY - this.startY;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach(area => {\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n\n      // 绘制当前选区\n      this.ctx.strokeStyle = \"blue\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.startX, this.startY, width, height);\n    },\n    // 完成绘制选区\n    endDrawing(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      this.selection.push({\n        x: this.startX,\n        y: this.startY,\n        width: endX - this.startX,\n        height: endY - this.startY\n      });\n      this.isDrawing = false;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach(area => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n    },\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    // 获取选中的区域\n    getSelectedAreas() {\n      return this.selection;\n    },\n    // 处理鼠标按下事件，判断是否点击了某个选区的控制点\n    handleMouseDown(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      // 判断是否点击了已有选区的控制点\n      this.selection.forEach((area, index) => {\n        const rightBottomX = area.x + area.width;\n        const rightBottomY = area.y + area.height;\n\n        // 判断是否点击右下角缩放点\n        if (mouseX >= rightBottomX - this.resizeHandleSize && mouseX <= rightBottomX && mouseY >= rightBottomY - this.resizeHandleSize && mouseY <= rightBottomY) {\n          this.currentSelection = {\n            ...area,\n            index\n          };\n          this.isResizing = true;\n        }\n\n        // 判断是否点击顶部中间拖拽点\n        const dragHandleX = area.x + area.width / 2 - this.dragHandleSize / 2;\n        if (mouseX >= dragHandleX && mouseX <= dragHandleX + this.dragHandleSize && mouseY >= area.y - this.dragHandleSize && mouseY <= area.y) {\n          this.currentSelection = {\n            ...area,\n            index\n          };\n          this.isDragging = true;\n          this.draggingOffsetX = mouseX - area.x;\n          this.draggingOffsetY = mouseY - area.y;\n        }\n      });\n    },\n    // 处理鼠标移动事件，进行缩放或拖拽\n    handleMouseMove(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      if (this.isResizing && this.currentSelection) {\n        const width = mouseX - this.currentSelection.x;\n        const height = mouseY - this.currentSelection.y;\n        this.currentSelection.width = width;\n        this.currentSelection.height = height;\n      }\n      if (this.isDragging && this.currentSelection) {\n        this.currentSelection.x = mouseX - this.draggingOffsetX;\n        this.currentSelection.y = mouseY - this.draggingOffsetY;\n      }\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach(area => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n      if (this.currentSelection) {\n        // 绘制当前操作的选区\n        this.ctx.strokeRect(this.currentSelection.x, this.currentSelection.y, this.currentSelection.width, this.currentSelection.height);\n      }\n    },\n    // 处理鼠标抬起事件\n    handleMouseUp() {\n      this.isResizing = false;\n      this.isDragging = false;\n      this.currentSelection = null;\n    },\n    // 绘制遮罩层\n    drawMask() {\n      if (!this.selection.length) return;\n      this.selection.forEach(area => {\n        this.ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n        this.ctx.fillRect(0, 0, area.x, this.canvasHeight); // 左侧遮罩\n        this.ctx.fillRect(area.x + area.width, 0, this.canvasWidth - (area.x + area.width), this.canvasHeight); // 右侧遮罩\n        this.ctx.fillRect(area.x, 0, area.width, area.y); // 上侧遮罩\n        this.ctx.fillRect(area.x, area.y + area.height, area.width, this.canvasHeight - (area.y + area.height)); // 下侧遮罩\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","canvasWidth","canvasHeight","image","Image","selection","isDrawing","startX","startY","isResizing","isDragging","currentSelection","draggingOffsetX","draggingOffsetY","ctx","resizeHandleSize","dragHandleSize","mounted","$refs","canvas","getContext","src","imageSrc","onload","onImageLoad","props","type","String","required","methods","width","height","drawImage","startDrawing","e","rect","getBoundingClientRect","clientX","left","clientY","top","draw","endX","endY","clearCanvas","forEach","area","strokeStyle","lineWidth","strokeRect","x","y","endDrawing","push","clearRect","getSelectedAreas","handleMouseDown","mouseX","mouseY","index","rightBottomX","rightBottomY","dragHandleX","handleMouseMove","handleMouseUp","drawMask","length","fillStyle","fillRect"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas\n      ref=\"canvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousedown=\"startDrawing\"\n      @mousemove=\"draw\"\n      @mouseup=\"endDrawing\"\n      @mouseleave=\"endDrawing\"\n      @mousedown=\"handleMouseDown\"\n    ></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [], // 存储所有选区\n      isDrawing: false, // 标记是否正在绘制\n      startX: 0,\n      startY: 0,\n      isResizing: false, // 是否正在缩放\n      isDragging: false, // 是否正在拖拽\n      currentSelection: null, // 当前选中的区域\n      draggingOffsetX: 0,\n      draggingOffsetY: 0,\n      ctx: null, // 画布上下文\n      resizeHandleSize: 10, // 缩放手柄大小\n      dragHandleSize: 10, // 拖拽手柄大小\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\"; // 可以通过props传入图片路径\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n    },\n\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n      this.isDrawing = true;\n    },\n\n    // 绘制选区\n    draw(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      const width = endX - this.startX;\n      const height = endY - this.startY;\n\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach((area) => {\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n\n      // 绘制当前选区\n      this.ctx.strokeStyle = \"blue\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.startX, this.startY, width, height);\n    },\n\n    // 完成绘制选区\n    endDrawing(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      this.selection.push({\n        x: this.startX,\n        y: this.startY,\n        width: endX - this.startX,\n        height: endY - this.startY,\n      });\n      this.isDrawing = false;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach((area) => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n    },\n\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    // 获取选中的区域\n    getSelectedAreas() {\n      return this.selection;\n    },\n\n    // 处理鼠标按下事件，判断是否点击了某个选区的控制点\n    handleMouseDown(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      // 判断是否点击了已有选区的控制点\n      this.selection.forEach((area, index) => {\n        const rightBottomX = area.x + area.width;\n        const rightBottomY = area.y + area.height;\n\n        // 判断是否点击右下角缩放点\n        if (\n          mouseX >= rightBottomX - this.resizeHandleSize &&\n          mouseX <= rightBottomX &&\n          mouseY >= rightBottomY - this.resizeHandleSize &&\n          mouseY <= rightBottomY\n        ) {\n          this.currentSelection = { ...area, index };\n          this.isResizing = true;\n        }\n\n        // 判断是否点击顶部中间拖拽点\n        const dragHandleX = area.x + area.width / 2 - this.dragHandleSize / 2;\n        if (\n          mouseX >= dragHandleX &&\n          mouseX <= dragHandleX + this.dragHandleSize &&\n          mouseY >= area.y - this.dragHandleSize &&\n          mouseY <= area.y\n        ) {\n          this.currentSelection = { ...area, index };\n          this.isDragging = true;\n          this.draggingOffsetX = mouseX - area.x;\n          this.draggingOffsetY = mouseY - area.y;\n        }\n      });\n    },\n\n    // 处理鼠标移动事件，进行缩放或拖拽\n    handleMouseMove(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      if (this.isResizing && this.currentSelection) {\n        const width = mouseX - this.currentSelection.x;\n        const height = mouseY - this.currentSelection.y;\n        this.currentSelection.width = width;\n        this.currentSelection.height = height;\n      }\n\n      if (this.isDragging && this.currentSelection) {\n        this.currentSelection.x = mouseX - this.draggingOffsetX;\n        this.currentSelection.y = mouseY - this.draggingOffsetY;\n      }\n\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach((area) => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n\n      if (this.currentSelection) {\n        // 绘制当前操作的选区\n        this.ctx.strokeRect(\n          this.currentSelection.x,\n          this.currentSelection.y,\n          this.currentSelection.width,\n          this.currentSelection.height\n        );\n      }\n    },\n\n    // 处理鼠标抬起事件\n    handleMouseUp() {\n      this.isResizing = false;\n      this.isDragging = false;\n      this.currentSelection = null;\n    },\n\n    // 绘制遮罩层\n    drawMask() {\n      if (!this.selection.length) return;\n      this.selection.forEach((area) => {\n        this.ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n        this.ctx.fillRect(0, 0, area.x, this.canvasHeight); // 左侧遮罩\n        this.ctx.fillRect(\n          area.x + area.width,\n          0,\n          this.canvasWidth - (area.x + area.width),\n          this.canvasHeight\n        ); // 右侧遮罩\n        this.ctx.fillRect(area.x, 0, area.width, area.y); // 上侧遮罩\n        this.ctx.fillRect(\n          area.x,\n          area.y + area.height,\n          area.width,\n          this.canvasHeight - (area.y + area.height)\n        ); // 下侧遮罩\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\ncanvas {\n  border: 1px solid #000;\n  cursor: crosshair;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}