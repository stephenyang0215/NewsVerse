{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      // 图片和画布的大小\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [],\n      // 存储选区数据\n      isDrawing: false,\n      // 标记是否正在绘制\n      startX: 0,\n      startY: 0,\n      ctx: null // 画布上下文\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\"; // 可以通过props传入图片路径\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    // 图片加载完毕后设置画布尺寸\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n    },\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n      this.isDrawing = true;\n    },\n    // 绘制选区\n    draw(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      const width = endX - this.startX;\n      const height = endY - this.startY;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制当前选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.startX, this.startY, width, height);\n    },\n    // 完成绘制选区\n    endDrawing(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      this.selection.push({\n        x: this.startX,\n        y: this.startY,\n        width: endX - this.startX,\n        height: endY - this.startY\n      });\n      this.isDrawing = false;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach(area => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n      console.log(this.selection);\n    },\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    // 获取已选择的区域信息\n    getSelectedAreas() {\n      return this.selection;\n    }\n  }\n};","map":{"version":3,"names":["data","canvasWidth","canvasHeight","image","Image","selection","isDrawing","startX","startY","ctx","mounted","$refs","canvas","getContext","src","imageSrc","onload","onImageLoad","props","type","String","required","methods","width","height","drawImage","startDrawing","e","rect","getBoundingClientRect","clientX","left","clientY","top","draw","endX","endY","clearCanvas","strokeStyle","lineWidth","strokeRect","endDrawing","push","x","y","forEach","area","console","log","clearRect","getSelectedAreas"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas\n      ref=\"canvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousedown=\"startDrawing\"\n      @mousemove=\"draw\"\n      @mouseup=\"endDrawing\"\n      @mouseleave=\"endDrawing\"\n    ></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 图片和画布的大小\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [], // 存储选区数据\n      isDrawing: false, // 标记是否正在绘制\n      startX: 0,\n      startY: 0,\n      ctx: null, // 画布上下文\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\"; // 可以通过props传入图片路径\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {\n    // 图片加载完毕后设置画布尺寸\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n    },\n\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n      this.isDrawing = true;\n    },\n\n    // 绘制选区\n    draw(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      const width = endX - this.startX;\n      const height = endY - this.startY;\n\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制当前选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.startX, this.startY, width, height);\n    },\n\n    // 完成绘制选区\n    endDrawing(e) {\n      if (!this.isDrawing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      this.selection.push({\n        x: this.startX,\n        y: this.startY,\n        width: endX - this.startX,\n        height: endY - this.startY,\n      });\n      this.isDrawing = false;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach((area) => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n      console.log(this.selection);\n    },\n\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    // 获取已选择的区域信息\n    getSelectedAreas() {\n      return this.selection;\n    },\n  },\n};\n</script>\n\n<style scoped>\ncanvas {\n  border: 1px solid #000;\n  cursor: crosshair;\n}\n</style>\n"],"mappings":";AAeA;EACAA,KAAA;IACA;MACA;MACAC,WAAA;MACAC,YAAA;MACAC,KAAA,MAAAC,KAAA;MACAC,SAAA;MAAA;MACAC,SAAA;MAAA;MACAC,MAAA;MACAC,MAAA;MACAC,GAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAD,GAAA,QAAAE,KAAA,CAAAC,MAAA,CAAAC,UAAA;IACA,KAAAV,KAAA,CAAAW,GAAA,QAAAC,QAAA;IACA,KAAAZ,KAAA,CAAAa,MAAA,QAAAC,WAAA;EACA;EACAC,KAAA;IACAH,QAAA;MACAI,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACA;IACAL,YAAA;MACA,KAAAhB,WAAA,QAAAE,KAAA,CAAAoB,KAAA;MACA,KAAArB,YAAA,QAAAC,KAAA,CAAAqB,MAAA;MACA,KAAAf,GAAA,CAAAgB,SAAA,MAAAtB,KAAA;IACA;IAEA;IACAuB,aAAAC,CAAA;MACA,MAAAC,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;MACA,KAAAtB,MAAA,GAAAoB,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;MACA,KAAAvB,MAAA,GAAAmB,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;MACA,KAAA3B,SAAA;IACA;IAEA;IACA4B,KAAAP,CAAA;MACA,UAAArB,SAAA;MACA,MAAAsB,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;MACA,MAAAM,IAAA,GAAAR,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;MACA,MAAAK,IAAA,GAAAT,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;MACA,MAAAV,KAAA,GAAAY,IAAA,QAAA5B,MAAA;MACA,MAAAiB,MAAA,GAAAY,IAAA,QAAA5B,MAAA;MAEA,KAAA6B,WAAA;MACA,KAAA5B,GAAA,CAAAgB,SAAA,MAAAtB,KAAA;;MAEA;MACA,KAAAM,GAAA,CAAA6B,WAAA;MACA,KAAA7B,GAAA,CAAA8B,SAAA;MACA,KAAA9B,GAAA,CAAA+B,UAAA,MAAAjC,MAAA,OAAAC,MAAA,EAAAe,KAAA,EAAAC,MAAA;IACA;IAEA;IACAiB,WAAAd,CAAA;MACA,UAAArB,SAAA;MACA,MAAAsB,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;MACA,MAAAM,IAAA,GAAAR,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;MACA,MAAAK,IAAA,GAAAT,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;MACA,KAAA5B,SAAA,CAAAqC,IAAA;QACAC,CAAA,OAAApC,MAAA;QACAqC,CAAA,OAAApC,MAAA;QACAe,KAAA,EAAAY,IAAA,QAAA5B,MAAA;QACAiB,MAAA,EAAAY,IAAA,QAAA5B;MACA;MACA,KAAAF,SAAA;MACA,KAAA+B,WAAA;MACA,KAAA5B,GAAA,CAAAgB,SAAA,MAAAtB,KAAA;;MAEA;MACA,KAAAE,SAAA,CAAAwC,OAAA,CAAAC,IAAA;QACA,KAAArC,GAAA,CAAA+B,UAAA,CAAAM,IAAA,CAAAH,CAAA,EAAAG,IAAA,CAAAF,CAAA,EAAAE,IAAA,CAAAvB,KAAA,EAAAuB,IAAA,CAAAtB,MAAA;MACA;MACAuB,OAAA,CAAAC,GAAA,MAAA3C,SAAA;IACA;IAEA;IACAgC,YAAA;MACA,KAAA5B,GAAA,CAAAwC,SAAA,YAAAhD,WAAA,OAAAC,YAAA;IACA;IAEA;IACAgD,iBAAA;MACA,YAAA7C,SAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}