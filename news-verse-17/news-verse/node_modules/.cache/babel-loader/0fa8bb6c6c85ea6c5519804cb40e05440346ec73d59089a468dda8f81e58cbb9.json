{"ast":null,"code":"import { getTimeAPI } from \"@/api/index\";\nexport default {\n  data() {\n    return {\n      currentDate: new Date(),\n      timeLoading: false,\n      timer: null\n    };\n  },\n  computed: {\n    formattedDate() {\n      const options = {\n        year: \"numeric\",\n        month: \"long\",\n        weekday: \"long\"\n      };\n      return this.currentDate.toLocaleDateString(\"en-US\", options);\n    },\n    formattedTime() {\n      const hours = this.currentDate.getHours();\n      const minutes = String(this.currentDate.getMinutes()).padStart(2, \"0\");\n      const seconds = String(this.currentDate.getSeconds()).padStart(2, \"0\");\n      return `${hours}:${minutes}:${seconds}`;\n    }\n  },\n  methods: {\n    async getTimeData() {\n      this.timeLoading = true;\n      try {\n        const res = await getTimeAPI();\n        this.currentDate = new Date(res.dateTime);\n        this.timeLoading = false;\n\n        // 确保定时器从精确时间点开始\n        this.startTimer();\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      // 每秒更新当前时间\n      this.timer = setInterval(() => {\n        this.currentDate = new Date(this.currentDate.getTime() + 1000);\n      }, 1000);\n    },\n    syncWithSystemTime() {\n      // 定期用系统时间校正以避免长时间运行误差\n      this.getTimeData();\n    }\n  },\n  mounted() {\n    this.getTimeData();\n\n    // 每隔10分钟重新同步时间\n    setInterval(() => {\n      this.syncWithSystemTime();\n    }, 10 * 60 * 1000);\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  }\n};","map":{"version":3,"names":["getTimeAPI","data","currentDate","Date","timeLoading","timer","computed","formattedDate","options","year","month","weekday","toLocaleDateString","formattedTime","hours","getHours","minutes","String","getMinutes","padStart","seconds","getSeconds","methods","getTimeData","res","dateTime","startTimer","error","console","setInterval","getTime","syncWithSystemTime","mounted","beforeDestroy","clearInterval"],"sources":["src/components/BostonClock.vue"],"sourcesContent":["<template>\n  <div class=\"time-container\">\n    <div v-if=\"timeLoading\">loading...</div>\n    <div v-else class=\"date-info\">\n      <div class=\"weatherCity\">Boston</div>\n      <h2>{{ formattedDate }}</h2>\n      <h3>{{ formattedTime }}</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getTimeAPI } from \"@/api/index\";\n\nexport default {\n  data() {\n    return {\n      currentDate: new Date(),\n      timeLoading: false,\n      timer: null,\n    };\n  },\n  computed: {\n    formattedDate() {\n      const options = { year: \"numeric\", month: \"long\", weekday: \"long\" };\n      return this.currentDate.toLocaleDateString(\"en-US\", options);\n    },\n    formattedTime() {\n      const hours = this.currentDate.getHours();\n      const minutes = String(this.currentDate.getMinutes()).padStart(2, \"0\");\n      const seconds = String(this.currentDate.getSeconds()).padStart(2, \"0\");\n      return `${hours}:${minutes}:${seconds}`;\n    },\n  },\n  methods: {\n    async getTimeData() {\n      this.timeLoading = true;\n      try {\n        const res = await getTimeAPI();\n        this.currentDate = new Date(res.dateTime);\n        this.timeLoading = false;\n\n        // 确保定时器从精确时间点开始\n        this.startTimer();\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    startTimer() {\n      // 每秒更新当前时间\n      this.timer = setInterval(() => {\n        this.currentDate = new Date(this.currentDate.getTime() + 1000);\n      }, 1000);\n    },\n    syncWithSystemTime() {\n      // 定期用系统时间校正以避免长时间运行误差\n      this.getTimeData();\n    },\n  },\n  mounted() {\n    this.getTimeData();\n\n    // 每隔10分钟重新同步时间\n    setInterval(() => {\n      this.syncWithSystemTime();\n    }, 10 * 60 * 1000);\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n};\n</script>\n\n<style scoped>\n.time-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-family: \"Arial\", sans-serif;\n  background-color: #e54f6d;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.date-info {\n  text-align: center;\n}\n\n.weatherCity {\n  color: rgb(0, 27, 160);\n  border-bottom: 1px solid rgb(0, 27, 160);\n}\n\nh2 {\n  margin: 0;\n  font-size: 24px;\n  color: #333;\n}\n\nh3 {\n  margin: 0;\n  font-size: 20px;\n  color: #666;\n}\n</style>\n"],"mappings":"AAYA,SAAAA,UAAA;AAEA;EACAC,KAAA;IACA;MACAC,WAAA,MAAAC,IAAA;MACAC,WAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,MAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,OAAA;MAAA;MACA,YAAAT,WAAA,CAAAU,kBAAA,UAAAJ,OAAA;IACA;IACAK,cAAA;MACA,MAAAC,KAAA,QAAAZ,WAAA,CAAAa,QAAA;MACA,MAAAC,OAAA,GAAAC,MAAA,MAAAf,WAAA,CAAAgB,UAAA,IAAAC,QAAA;MACA,MAAAC,OAAA,GAAAH,MAAA,MAAAf,WAAA,CAAAmB,UAAA,IAAAF,QAAA;MACA,UAAAL,KAAA,IAAAE,OAAA,IAAAI,OAAA;IACA;EACA;EACAE,OAAA;IACA,MAAAC,YAAA;MACA,KAAAnB,WAAA;MACA;QACA,MAAAoB,GAAA,SAAAxB,UAAA;QACA,KAAAE,WAAA,OAAAC,IAAA,CAAAqB,GAAA,CAAAC,QAAA;QACA,KAAArB,WAAA;;QAEA;QACA,KAAAsB,UAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA;MACA;IACA;IACAD,WAAA;MACA;MACA,KAAArB,KAAA,GAAAwB,WAAA;QACA,KAAA3B,WAAA,OAAAC,IAAA,MAAAD,WAAA,CAAA4B,OAAA;MACA;IACA;IACAC,mBAAA;MACA;MACA,KAAAR,WAAA;IACA;EACA;EACAS,QAAA;IACA,KAAAT,WAAA;;IAEA;IACAM,WAAA;MACA,KAAAE,kBAAA;IACA;EACA;EACAE,cAAA;IACAC,aAAA,MAAA7B,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}