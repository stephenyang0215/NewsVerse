{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageSrc: String\n  },\n  data() {\n    return {\n      img: null,\n      selections: [{\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100\n      }],\n      // 存储所有选区\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      activeSelectionIndex: null // 当前操作的选区索引\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    }\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n      this.drawCanvas();\n    },\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(ctx);\n\n      // 绘制所有选区\n      this.selections.forEach((selection, index) => {\n        this.drawSelection(ctx, selection, index);\n      });\n    },\n    // 绘制选区\n    drawSelection(ctx, selection, index) {\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(selection.x, selection.y, selection.width, selection.height);\n\n      // 绘制控制点\n      this.drawControlPoints(ctx, selection);\n\n      // 标记当前操作的选区\n      if (this.activeSelectionIndex === index) {\n        ctx.strokeStyle = \"blue\"; // 当前选区使用蓝色边框\n        ctx.lineWidth = 3;\n        ctx.strokeRect(selection.x, selection.y, selection.width, selection.height);\n      }\n    },\n    drawControlPoints(ctx, selection) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = selection;\n      const controlPoints = [{\n        x: x,\n        y: y\n      }, {\n        x: x + width,\n        y: y\n      }, {\n        x: x,\n        y: y + height\n      }, {\n        x: x + width,\n        y: y + height\n      }];\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach(point => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n    // 绘制灰色遮罩层\n    drawOverlay(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.selections[0]; // 获取第一个选区的坐标\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; // 半透明的灰色\n      ctx.fillRect(0, 0, ctx.canvas.width, y); // 选区上方\n      ctx.fillRect(0, y + height, ctx.canvas.width, ctx.canvas.height - (y + height)); // 选区下方\n      ctx.fillRect(0, y, x, height); // 选区左侧\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height); // 选区右侧\n    },\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 判断是否点击在已有的选区内\n      const clickedSelectionIndex = this.getClickedSelectionIndex(x, y);\n      if (clickedSelectionIndex !== null) {\n        // 选择已存在的选区进行缩放\n        this.activeSelectionIndex = clickedSelectionIndex;\n        const clickedCorner = this.getClickedCorner(x, y, clickedSelectionIndex);\n        if (clickedCorner !== null) {\n          this.isResizing = true;\n          this.resizeCorner = clickedCorner;\n        }\n      } else {\n        // 如果点击不在已有选区内，则创建一个新的选区\n        this.createNewSelection(x, y);\n      }\n    },\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 仅更新缩放\n      this.resizeSelection(x, y);\n      this.drawCanvas();\n    },\n    onMouseUp() {\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n    // 判断点击的区域是否在现有选区内\n    getClickedSelectionIndex(x, y) {\n      return this.selections.findIndex(selection => x >= selection.x && x <= selection.x + selection.width && y >= selection.y && y <= selection.y + selection.height);\n    },\n    // 判断是否点击了控制点\n    getClickedCorner(x, y, index) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = this.selections[index];\n      const corners = [{\n        x: selX,\n        y: selY\n      }, {\n        x: selX + width,\n        y: selY\n      }, {\n        x: selX,\n        y: selY + height\n      }, {\n        x: selX + width,\n        y: selY + height\n      }];\n      return corners.findIndex(corner => Math.abs(corner.x - x) < this.controlSize && Math.abs(corner.y - y) < this.controlSize);\n    },\n    // 创建新的选区\n    createNewSelection(x, y) {\n      const newSelection = {\n        x: x - 50,\n        y: y - 50,\n        width: 100,\n        height: 100\n      };\n      this.selections.push(newSelection);\n      this.activeSelectionIndex = this.selections.length - 1;\n      this.drawCanvas();\n    },\n    // 更新选区尺寸\n    resizeSelection(x, y) {\n      const selection = this.selections[this.activeSelectionIndex];\n      const {\n        x: selX,\n        y: selY\n      } = selection;\n      switch (this.resizeCorner) {\n        case 0:\n          // 左上角\n          selection.width += selX - x;\n          selection.height += selY - y;\n          selection.x = x;\n          selection.y = y;\n          break;\n        case 1:\n          // 右上角\n          selection.width = x - selX;\n          selection.height += selY - y;\n          selection.y = y;\n          break;\n        case 2:\n          // 左下角\n          selection.width += selX - x;\n          selection.height = y - selY;\n          selection.x = x;\n          break;\n        case 3:\n          // 右下角\n          selection.width = x - selX;\n          selection.height = y - selY;\n          break;\n      }\n\n      // 限制最小尺寸\n      selection.width = Math.max(20, selection.width);\n      selection.height = Math.max(20, selection.height);\n    },\n    sendSelection() {\n      const selectionData = this.selections.map(sel => ({\n        x: sel.x,\n        y: sel.y,\n        width: sel.width,\n        height: sel.height\n      }));\n      this.$emit(\"sendSelection\", selectionData);\n    }\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","String","data","img","selections","x","y","width","height","isResizing","resizeCorner","controlSize","activeSelectionIndex","watch","newSrc","loadImage","methods","src","Image","onload","setCanvasAndSelection","canvas","$refs","drawCanvas","ctx","getContext","clearRect","drawImage","drawOverlay","forEach","selection","index","drawSelection","strokeStyle","lineWidth","strokeRect","drawControlPoints","controlPoints","fillStyle","point","beginPath","arc","Math","PI","fill","fillRect","onMouseDown","event","canvasRect","getBoundingClientRect","clientX","left","clientY","top","clickedSelectionIndex","getClickedSelectionIndex","clickedCorner","getClickedCorner","createNewSelection","onMouseMove","resizeSelection","onMouseUp","findIndex","selX","selY","corners","corner","abs","newSelection","push","length","max","sendSelection","selectionData","map","sel","$emit","mounted"],"sources":["src/components/CanvasTest.vue"],"sourcesContent":["<template>\n  <div class=\"image-cropper\">\n    <canvas\n      ref=\"canvas\"\n      @mousedown=\"onMouseDown\"\n      @mouseup=\"onMouseUp\"\n      @mousemove=\"onMouseMove\"\n    ></canvas>\n    <button @click=\"sendSelection\">发送选中范围</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: String,\n  },\n  data() {\n    return {\n      img: null,\n      selections: [{ x: 50, y: 50, width: 100, height: 100 }], // 存储所有选区\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      activeSelectionIndex: null, // 当前操作的选区索引\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    },\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n\n      this.drawCanvas();\n    },\n\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(ctx);\n\n      // 绘制所有选区\n      this.selections.forEach((selection, index) => {\n        this.drawSelection(ctx, selection, index);\n      });\n    },\n\n    // 绘制选区\n    drawSelection(ctx, selection, index) {\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(\n        selection.x,\n        selection.y,\n        selection.width,\n        selection.height\n      );\n\n      // 绘制控制点\n      this.drawControlPoints(ctx, selection);\n\n      // 标记当前操作的选区\n      if (this.activeSelectionIndex === index) {\n        ctx.strokeStyle = \"blue\"; // 当前选区使用蓝色边框\n        ctx.lineWidth = 3;\n        ctx.strokeRect(\n          selection.x,\n          selection.y,\n          selection.width,\n          selection.height\n        );\n      }\n    },\n\n    drawControlPoints(ctx, selection) {\n      const { x, y, width, height } = selection;\n      const controlPoints = [\n        { x: x, y: y },\n        { x: x + width, y: y },\n        { x: x, y: y + height },\n        { x: x + width, y: y + height },\n      ];\n\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach((point) => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n\n    // 绘制灰色遮罩层\n    drawOverlay(ctx) {\n      const { x, y, width, height } = this.selections[0]; // 获取第一个选区的坐标\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; // 半透明的灰色\n      ctx.fillRect(0, 0, ctx.canvas.width, y); // 选区上方\n      ctx.fillRect(\n        0,\n        y + height,\n        ctx.canvas.width,\n        ctx.canvas.height - (y + height)\n      ); // 选区下方\n      ctx.fillRect(0, y, x, height); // 选区左侧\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height); // 选区右侧\n    },\n\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 判断是否点击在已有的选区内\n      const clickedSelectionIndex = this.getClickedSelectionIndex(x, y);\n\n      if (clickedSelectionIndex !== null) {\n        // 选择已存在的选区进行缩放\n        this.activeSelectionIndex = clickedSelectionIndex;\n        const clickedCorner = this.getClickedCorner(\n          x,\n          y,\n          clickedSelectionIndex\n        );\n        if (clickedCorner !== null) {\n          this.isResizing = true;\n          this.resizeCorner = clickedCorner;\n        }\n      } else {\n        // 如果点击不在已有选区内，则创建一个新的选区\n        this.createNewSelection(x, y);\n      }\n    },\n\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 仅更新缩放\n      this.resizeSelection(x, y);\n      this.drawCanvas();\n    },\n\n    onMouseUp() {\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n\n    // 判断点击的区域是否在现有选区内\n    getClickedSelectionIndex(x, y) {\n      return this.selections.findIndex(\n        (selection) =>\n          x >= selection.x &&\n          x <= selection.x + selection.width &&\n          y >= selection.y &&\n          y <= selection.y + selection.height\n      );\n    },\n\n    // 判断是否点击了控制点\n    getClickedCorner(x, y, index) {\n      const { x: selX, y: selY, width, height } = this.selections[index];\n      const corners = [\n        { x: selX, y: selY },\n        { x: selX + width, y: selY },\n        { x: selX, y: selY + height },\n        { x: selX + width, y: selY + height },\n      ];\n\n      return corners.findIndex(\n        (corner) =>\n          Math.abs(corner.x - x) < this.controlSize &&\n          Math.abs(corner.y - y) < this.controlSize\n      );\n    },\n\n    // 创建新的选区\n    createNewSelection(x, y) {\n      const newSelection = {\n        x: x - 50,\n        y: y - 50,\n        width: 100,\n        height: 100,\n      };\n      this.selections.push(newSelection);\n      this.activeSelectionIndex = this.selections.length - 1;\n      this.drawCanvas();\n    },\n\n    // 更新选区尺寸\n    resizeSelection(x, y) {\n      const selection = this.selections[this.activeSelectionIndex];\n      const { x: selX, y: selY } = selection;\n\n      switch (this.resizeCorner) {\n        case 0: // 左上角\n          selection.width += selX - x;\n          selection.height += selY - y;\n          selection.x = x;\n          selection.y = y;\n          break;\n        case 1: // 右上角\n          selection.width = x - selX;\n          selection.height += selY - y;\n          selection.y = y;\n          break;\n        case 2: // 左下角\n          selection.width += selX - x;\n          selection.height = y - selY;\n          selection.x = x;\n          break;\n        case 3: // 右下角\n          selection.width = x - selX;\n          selection.height = y - selY;\n          break;\n      }\n\n      // 限制最小尺寸\n      selection.width = Math.max(20, selection.width);\n      selection.height = Math.max(20, selection.height);\n    },\n\n    sendSelection() {\n      const selectionData = this.selections.map((sel) => ({\n        x: sel.x,\n        y: sel.y,\n        width: sel.width,\n        height: sel.height,\n      }));\n      this.$emit(\"sendSelection\", selectionData);\n    },\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.image-cropper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\ncanvas {\n  border: 1px solid #000;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}