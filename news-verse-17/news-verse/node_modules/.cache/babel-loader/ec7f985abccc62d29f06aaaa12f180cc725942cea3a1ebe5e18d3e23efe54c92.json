{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageUrl: {\n      type: String,\n      required: true\n    },\n    initialSelectedAreas: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      image: null,\n      // 存储图片对象\n      canvas: null,\n      // canvas 实例\n      ctx: null,\n      // canvas 上下文\n      isSelecting: false,\n      // 是否在选择区域\n      selectionStart: {\n        x: 0,\n        y: 0\n      },\n      // 选择框开始位置\n      selectionEnd: {\n        x: 0,\n        y: 0\n      },\n      // 选择框结束位置\n      selectedAreas: this.initialSelectedAreas // 存储选中区域\n    };\n  },\n  mounted() {\n    this.initCanvas();\n    this.loadImage(this.imageUrl);\n  },\n  methods: {\n    initCanvas() {\n      this.canvas = this.$refs.canvas;\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.canvas.width = window.innerWidth * 0.8; // 设置 canvas 宽度\n      this.canvas.height = window.innerHeight * 0.6; // 设置 canvas 高度\n    },\n    loadImage(imageUrl) {\n      this.image = new Image();\n      this.image.src = imageUrl;\n      this.image.onload = () => {\n        // 图片加载完成后，绘制到 canvas\n        this.drawImage();\n      };\n    },\n    drawImage() {\n      if (this.image) {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // 清除画布\n        this.ctx.drawImage(this.image, 0, 0, this.canvas.width, this.canvas.height); // 绘制图片\n\n        // 绘制已选择的区域\n        this.selectedAreas.forEach(area => {\n          this.ctx.fillStyle = \"rgba(0, 0, 255, 0.3)\";\n          this.ctx.fillRect(area.x1, area.y1, area.x2 - area.x1, area.y2 - area.y1);\n          this.ctx.strokeStyle = \"rgba(0, 0, 255, 0.5)\";\n          this.ctx.lineWidth = 2;\n          this.ctx.strokeRect(area.x1, area.y1, area.x2 - area.x1, area.y2 - area.y1);\n        });\n\n        // 如果正在选择区域，则绘制当前的选择框\n        if (this.isSelecting) {\n          const width = Math.abs(this.selectionEnd.x - this.selectionStart.x);\n          const height = Math.abs(this.selectionEnd.y - this.selectionStart.y);\n          const left = Math.min(this.selectionStart.x, this.selectionEnd.x);\n          const top = Math.min(this.selectionStart.y, this.selectionEnd.y);\n          this.ctx.fillStyle = \"rgba(0, 0, 255, 0.3)\";\n          this.ctx.fillRect(left, top, width, height);\n          this.ctx.strokeStyle = \"rgba(0, 0, 255, 0.5)\";\n          this.ctx.lineWidth = 2;\n          this.ctx.strokeRect(left, top, width, height);\n        }\n      }\n    },\n    onMouseDown(event) {\n      const {\n        offsetX,\n        offsetY\n      } = event;\n      this.isSelecting = true;\n      this.selectionStart = {\n        x: offsetX,\n        y: offsetY\n      };\n      this.selectionEnd = {\n        x: offsetX,\n        y: offsetY\n      };\n    },\n    onMouseUp() {\n      if (this.isSelecting) {\n        const area = {\n          x1: Math.min(this.selectionStart.x, this.selectionEnd.x),\n          y1: Math.min(this.selectionStart.y, this.selectionEnd.y),\n          x2: Math.max(this.selectionStart.x, this.selectionEnd.x),\n          y2: Math.max(this.selectionStart.y, this.selectionEnd.y)\n        };\n        this.selectedAreas.push(area);\n        this.isSelecting = false;\n        this.sendAreasToBackend(); // 将区域信息发送到后端\n      }\n    },\n    onMouseMove(event) {\n      if (this.isSelecting) {\n        this.selectionEnd = {\n          x: event.offsetX,\n          y: event.offsetY\n        };\n        this.drawImage(); // 重新绘制图片和选择框\n      }\n    },\n    onMouseOut() {\n      if (this.isSelecting) {\n        this.isSelecting = false;\n        this.drawImage(); // 重新绘制图片，移除选择框\n      }\n    },\n    sendAreasToBackend() {\n      // 将选中的区域信息发送到后端\n      this.$axios.post(\"/api/save-areas\", {\n        areas: this.selectedAreas\n      }).then(response => {\n        console.log(\"Areas saved successfully:\", response);\n      }).catch(error => {\n        console.error(\"Failed to save areas:\", error);\n      });\n    }\n  },\n  watch: {\n    selectedAreas(newValue) {\n      // 当 selectedAreas 更新时，将数据存储在本地，或者发送给后端\n      localStorage.setItem(\"selectedAreas\", JSON.stringify(newValue));\n      this.drawImage(); // 更新选择区域\n    }\n  },\n  created() {\n    const savedAreas = localStorage.getItem(\"selectedAreas\");\n    if (savedAreas) {\n      this.selectedAreas = JSON.parse(savedAreas);\n    }\n  }\n};","map":{"version":3,"names":["props","imageUrl","type","String","required","initialSelectedAreas","Array","default","data","image","canvas","ctx","isSelecting","selectionStart","x","y","selectionEnd","selectedAreas","mounted","initCanvas","loadImage","methods","$refs","getContext","width","window","innerWidth","height","innerHeight","Image","src","onload","drawImage","clearRect","forEach","area","fillStyle","fillRect","x1","y1","x2","y2","strokeStyle","lineWidth","strokeRect","Math","abs","left","min","top","onMouseDown","event","offsetX","offsetY","onMouseUp","max","push","sendAreasToBackend","onMouseMove","onMouseOut","$axios","post","areas","then","response","console","log","catch","error","watch","newValue","localStorage","setItem","JSON","stringify","created","savedAreas","getItem","parse"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div class=\"canvas-container\">\n    <canvas\n      ref=\"canvas\"\n      @mousedown=\"onMouseDown\"\n      @mousemove=\"onMouseMove\"\n      @mouseup=\"onMouseUp\"\n      @mouseout=\"onMouseOut\"\n    ></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageUrl: {\n      type: String,\n      required: true,\n    },\n    initialSelectedAreas: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      image: null, // 存储图片对象\n      canvas: null, // canvas 实例\n      ctx: null, // canvas 上下文\n      isSelecting: false, // 是否在选择区域\n      selectionStart: { x: 0, y: 0 }, // 选择框开始位置\n      selectionEnd: { x: 0, y: 0 }, // 选择框结束位置\n      selectedAreas: this.initialSelectedAreas, // 存储选中区域\n    };\n  },\n  mounted() {\n    this.initCanvas();\n    this.loadImage(this.imageUrl);\n  },\n  methods: {\n    initCanvas() {\n      this.canvas = this.$refs.canvas;\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.canvas.width = window.innerWidth * 0.8; // 设置 canvas 宽度\n      this.canvas.height = window.innerHeight * 0.6; // 设置 canvas 高度\n    },\n\n    loadImage(imageUrl) {\n      this.image = new Image();\n      this.image.src = imageUrl;\n      this.image.onload = () => {\n        // 图片加载完成后，绘制到 canvas\n        this.drawImage();\n      };\n    },\n\n    drawImage() {\n      if (this.image) {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // 清除画布\n        this.ctx.drawImage(\n          this.image,\n          0,\n          0,\n          this.canvas.width,\n          this.canvas.height\n        ); // 绘制图片\n\n        // 绘制已选择的区域\n        this.selectedAreas.forEach((area) => {\n          this.ctx.fillStyle = \"rgba(0, 0, 255, 0.3)\";\n          this.ctx.fillRect(\n            area.x1,\n            area.y1,\n            area.x2 - area.x1,\n            area.y2 - area.y1\n          );\n          this.ctx.strokeStyle = \"rgba(0, 0, 255, 0.5)\";\n          this.ctx.lineWidth = 2;\n          this.ctx.strokeRect(\n            area.x1,\n            area.y1,\n            area.x2 - area.x1,\n            area.y2 - area.y1\n          );\n        });\n\n        // 如果正在选择区域，则绘制当前的选择框\n        if (this.isSelecting) {\n          const width = Math.abs(this.selectionEnd.x - this.selectionStart.x);\n          const height = Math.abs(this.selectionEnd.y - this.selectionStart.y);\n          const left = Math.min(this.selectionStart.x, this.selectionEnd.x);\n          const top = Math.min(this.selectionStart.y, this.selectionEnd.y);\n\n          this.ctx.fillStyle = \"rgba(0, 0, 255, 0.3)\";\n          this.ctx.fillRect(left, top, width, height);\n          this.ctx.strokeStyle = \"rgba(0, 0, 255, 0.5)\";\n          this.ctx.lineWidth = 2;\n          this.ctx.strokeRect(left, top, width, height);\n        }\n      }\n    },\n\n    onMouseDown(event) {\n      const { offsetX, offsetY } = event;\n      this.isSelecting = true;\n      this.selectionStart = { x: offsetX, y: offsetY };\n      this.selectionEnd = { x: offsetX, y: offsetY };\n    },\n\n    onMouseUp() {\n      if (this.isSelecting) {\n        const area = {\n          x1: Math.min(this.selectionStart.x, this.selectionEnd.x),\n          y1: Math.min(this.selectionStart.y, this.selectionEnd.y),\n          x2: Math.max(this.selectionStart.x, this.selectionEnd.x),\n          y2: Math.max(this.selectionStart.y, this.selectionEnd.y),\n        };\n        this.selectedAreas.push(area);\n        this.isSelecting = false;\n        this.sendAreasToBackend(); // 将区域信息发送到后端\n      }\n    },\n\n    onMouseMove(event) {\n      if (this.isSelecting) {\n        this.selectionEnd = { x: event.offsetX, y: event.offsetY };\n        this.drawImage(); // 重新绘制图片和选择框\n      }\n    },\n\n    onMouseOut() {\n      if (this.isSelecting) {\n        this.isSelecting = false;\n        this.drawImage(); // 重新绘制图片，移除选择框\n      }\n    },\n\n    sendAreasToBackend() {\n      // 将选中的区域信息发送到后端\n      this.$axios\n        .post(\"/api/save-areas\", { areas: this.selectedAreas })\n        .then((response) => {\n          console.log(\"Areas saved successfully:\", response);\n        })\n        .catch((error) => {\n          console.error(\"Failed to save areas:\", error);\n        });\n    },\n  },\n\n  watch: {\n    selectedAreas(newValue) {\n      // 当 selectedAreas 更新时，将数据存储在本地，或者发送给后端\n      localStorage.setItem(\"selectedAreas\", JSON.stringify(newValue));\n      this.drawImage(); // 更新选择区域\n    },\n  },\n\n  created() {\n    const savedAreas = localStorage.getItem(\"selectedAreas\");\n    if (savedAreas) {\n      this.selectedAreas = JSON.parse(savedAreas);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.canvas-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n\ncanvas {\n  border: 1px solid #ccc;\n  cursor: crosshair;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}