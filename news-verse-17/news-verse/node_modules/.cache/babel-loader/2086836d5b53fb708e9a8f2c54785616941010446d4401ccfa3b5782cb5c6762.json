{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageSrc: String\n  },\n  data() {\n    return {\n      img: null,\n      mainSelection: {\n        x: 50,\n        y: 50,\n        width: 200,\n        height: 200,\n        children: [] // 用于存储子区域\n      },\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      activeChildIndex: null\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    }\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n      this.drawCanvas();\n    },\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(ctx);\n\n      // 绘制主选区\n      this.drawSelection(ctx, this.mainSelection);\n\n      // 绘制子选区\n      this.mainSelection.children.forEach((child, index) => {\n        this.drawSelection(ctx, child, index === this.activeChildIndex);\n      });\n    },\n    drawSelection(ctx, selection, isActive = false) {\n      if (!selection) return;\n      ctx.strokeStyle = isActive ? \"blue\" : \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(selection.x, selection.y, selection.width, selection.height);\n      this.drawControlPoints(ctx, selection);\n    },\n    drawControlPoints(ctx, selection) {\n      if (!selection) return;\n      const {\n        x,\n        y,\n        width,\n        height\n      } = selection;\n      const controlPoints = [{\n        x: x,\n        y: y\n      }, {\n        x: x + width,\n        y: y\n      }, {\n        x: x,\n        y: y + height\n      }, {\n        x: x + width,\n        y: y + height\n      }];\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach(point => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n    drawOverlay(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.mainSelection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n      ctx.fillRect(0, 0, ctx.canvas.width, y);\n      ctx.fillRect(0, y + height, ctx.canvas.width, ctx.canvas.height - (y + height));\n      ctx.fillRect(0, y, x, height);\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height);\n    },\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      const clickedChildIndex = this.getClickedChildIndex(x, y);\n      if (clickedChildIndex !== null) {\n        this.activeChildIndex = clickedChildIndex;\n        const clickedCorner = this.getClickedCorner(x, y, this.mainSelection.children[this.activeChildIndex]);\n        if (clickedCorner !== null) {\n          this.isResizing = true;\n          this.resizeCorner = clickedCorner;\n        }\n      } else if (this.isWithinMainSelection(x, y)) {\n        this.mainSelection.children.push({\n          x: x,\n          y: y,\n          width: 50,\n          height: 50\n        });\n        this.activeChildIndex = this.mainSelection.children.length - 1;\n        this.drawCanvas();\n      } else {\n        this.activeChildIndex = null;\n      }\n    },\n    onMouseMove(event) {\n      if (!this.isResizing || this.activeChildIndex === null) return;\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      this.resizeSelection(x, y);\n      this.drawCanvas();\n    },\n    onMouseUp() {\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n    getClickedChildIndex(x, y) {\n      return this.mainSelection.children.findIndex(child => x >= child.x && x <= child.x + child.width && y >= child.y && y <= child.y + child.height);\n    },\n    getClickedCorner(x, y, selection) {\n      if (!selection) return null;\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = selection;\n      const corners = [{\n        x: selX,\n        y: selY\n      }, {\n        x: selX + width,\n        y: selY\n      }, {\n        x: selX,\n        y: selY + height\n      }, {\n        x: selX + width,\n        y: selY + height\n      }];\n      return corners.findIndex(corner => Math.abs(corner.x - x) < this.controlSize && Math.abs(corner.y - y) < this.controlSize);\n    },\n    resizeSelection(x, y) {\n      if (this.activeChildIndex === null || !this.mainSelection.children[this.activeChildIndex]) return;\n      const selection = this.mainSelection.children[this.activeChildIndex];\n      if (!selection) return;\n      const {\n        x: selX,\n        y: selY\n      } = selection;\n      switch (this.resizeCorner) {\n        case 0:\n          selection.width += selX - x;\n          selection.height += selY - y;\n          selection.x = x;\n          selection.y = y;\n          break;\n        case 1:\n          selection.width = x - selX;\n          selection.height += selY - y;\n          selection.y = y;\n          break;\n        case 2:\n          selection.width += selX - x;\n          selection.height = y - selY;\n          selection.x = x;\n          break;\n        case 3:\n          selection.width = x - selX;\n          selection.height = y - selY;\n          break;\n      }\n      selection.width = Math.max(20, selection.width);\n      selection.height = Math.max(20, selection.height);\n    },\n    sendSelection() {\n      const selectionData = this.mainSelection.children.map(sel => ({\n        x: sel.x,\n        y: sel.y,\n        width: sel.width,\n        height: sel.height\n      }));\n      this.$emit(\"sendSelection\", selectionData);\n    }\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","String","data","img","mainSelection","x","y","width","height","children","isResizing","resizeCorner","controlSize","activeChildIndex","watch","newSrc","loadImage","methods","src","Image","onload","setCanvasAndSelection","canvas","$refs","drawCanvas","ctx","getContext","clearRect","drawImage","drawOverlay","drawSelection","forEach","child","index","selection","isActive","strokeStyle","lineWidth","strokeRect","drawControlPoints","controlPoints","fillStyle","point","beginPath","arc","Math","PI","fill","fillRect","onMouseDown","event","canvasRect","getBoundingClientRect","clientX","left","clientY","top","clickedChildIndex","getClickedChildIndex","clickedCorner","getClickedCorner","isWithinMainSelection","push","length","onMouseMove","resizeSelection","onMouseUp","findIndex","selX","selY","corners","corner","abs","max","sendSelection","selectionData","map","sel","$emit","mounted"],"sources":["src/components/CanvasTest.vue"],"sourcesContent":["<template>\n  <div class=\"image-cropper\">\n    <canvas\n      ref=\"canvas\"\n      @mousedown=\"onMouseDown\"\n      @mouseup=\"onMouseUp\"\n      @mousemove=\"onMouseMove\"\n    ></canvas>\n    <button @click=\"sendSelection\">发送选中范围</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: String,\n  },\n  data() {\n    return {\n      img: null,\n      mainSelection: {\n        x: 50,\n        y: 50,\n        width: 200,\n        height: 200,\n        children: [], // 用于存储子区域\n      },\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      activeChildIndex: null,\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    },\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n      this.drawCanvas();\n    },\n\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(ctx);\n\n      // 绘制主选区\n      this.drawSelection(ctx, this.mainSelection);\n\n      // 绘制子选区\n      this.mainSelection.children.forEach((child, index) => {\n        this.drawSelection(ctx, child, index === this.activeChildIndex);\n      });\n    },\n\n    drawSelection(ctx, selection, isActive = false) {\n      if (!selection) return;\n\n      ctx.strokeStyle = isActive ? \"blue\" : \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(\n        selection.x,\n        selection.y,\n        selection.width,\n        selection.height\n      );\n\n      this.drawControlPoints(ctx, selection);\n    },\n\n    drawControlPoints(ctx, selection) {\n      if (!selection) return;\n\n      const { x, y, width, height } = selection;\n      const controlPoints = [\n        { x: x, y: y },\n        { x: x + width, y: y },\n        { x: x, y: y + height },\n        { x: x + width, y: y + height },\n      ];\n\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach((point) => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n\n    drawOverlay(ctx) {\n      const { x, y, width, height } = this.mainSelection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n      ctx.fillRect(0, 0, ctx.canvas.width, y);\n      ctx.fillRect(\n        0,\n        y + height,\n        ctx.canvas.width,\n        ctx.canvas.height - (y + height)\n      );\n      ctx.fillRect(0, y, x, height);\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height);\n    },\n\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      const clickedChildIndex = this.getClickedChildIndex(x, y);\n\n      if (clickedChildIndex !== null) {\n        this.activeChildIndex = clickedChildIndex;\n        const clickedCorner = this.getClickedCorner(\n          x,\n          y,\n          this.mainSelection.children[this.activeChildIndex]\n        );\n        if (clickedCorner !== null) {\n          this.isResizing = true;\n          this.resizeCorner = clickedCorner;\n        }\n      } else if (this.isWithinMainSelection(x, y)) {\n        this.mainSelection.children.push({\n          x: x,\n          y: y,\n          width: 50,\n          height: 50,\n        });\n        this.activeChildIndex = this.mainSelection.children.length - 1;\n        this.drawCanvas();\n      } else {\n        this.activeChildIndex = null;\n      }\n    },\n\n    onMouseMove(event) {\n      if (!this.isResizing || this.activeChildIndex === null) return;\n\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      this.resizeSelection(x, y);\n      this.drawCanvas();\n    },\n\n    onMouseUp() {\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n\n    getClickedChildIndex(x, y) {\n      return this.mainSelection.children.findIndex(\n        (child) =>\n          x >= child.x &&\n          x <= child.x + child.width &&\n          y >= child.y &&\n          y <= child.y + child.height\n      );\n    },\n\n    getClickedCorner(x, y, selection) {\n      if (!selection) return null;\n\n      const { x: selX, y: selY, width, height } = selection;\n      const corners = [\n        { x: selX, y: selY },\n        { x: selX + width, y: selY },\n        { x: selX, y: selY + height },\n        { x: selX + width, y: selY + height },\n      ];\n\n      return corners.findIndex(\n        (corner) =>\n          Math.abs(corner.x - x) < this.controlSize &&\n          Math.abs(corner.y - y) < this.controlSize\n      );\n    },\n\n    resizeSelection(x, y) {\n      if (\n        this.activeChildIndex === null ||\n        !this.mainSelection.children[this.activeChildIndex]\n      )\n        return;\n\n      const selection = this.mainSelection.children[this.activeChildIndex];\n      if (!selection) return;\n\n      const { x: selX, y: selY } = selection;\n\n      switch (this.resizeCorner) {\n        case 0:\n          selection.width += selX - x;\n          selection.height += selY - y;\n          selection.x = x;\n          selection.y = y;\n          break;\n        case 1:\n          selection.width = x - selX;\n          selection.height += selY - y;\n          selection.y = y;\n          break;\n        case 2:\n          selection.width += selX - x;\n          selection.height = y - selY;\n          selection.x = x;\n          break;\n        case 3:\n          selection.width = x - selX;\n          selection.height = y - selY;\n          break;\n      }\n\n      selection.width = Math.max(20, selection.width);\n      selection.height = Math.max(20, selection.height);\n    },\n\n    sendSelection() {\n      const selectionData = this.mainSelection.children.map((sel) => ({\n        x: sel.x,\n        y: sel.y,\n        width: sel.width,\n        height: sel.height,\n      }));\n      this.$emit(\"sendSelection\", selectionData);\n    },\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.image-cropper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\ncanvas {\n  border: 1px solid #000;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}