{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      img: null,\n      // 图片元素\n      ctx: null,\n      // canvas 的上下文\n      isSelecting: false,\n      // 是否正在选择区域\n      isResizing: false,\n      // 是否正在调整区域大小\n      isDragging: false,\n      // 是否正在拖拽区域\n      selectionBox: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      },\n      // 选区信息\n      startPoint: null,\n      // 选择区域的起点\n      startDragPoint: null,\n      // 拖拽起点\n      resizeStartPoint: null,\n      // 调整区域大小的起点\n      isOverlayVisible: true,\n      // 是否显示遮罩层\n      markedRegions: [] // 标记区域列表\n    };\n  },\n  mounted() {\n    // 获取 canvas 上下文\n    const canvas = this.$refs.canvas;\n    this.ctx = canvas.getContext(\"2d\");\n\n    // 加载图片并绘制到 canvas 上\n    this.loadImage(this.imageSrc);\n\n    // 绑定事件\n    canvas.addEventListener(\"mousemove\", this.mouseMove);\n    canvas.addEventListener(\"mouseup\", this.mouseUp);\n  },\n  methods: {\n    // 加载图片\n    loadImage(src) {\n      this.img = new Image();\n      this.img.src = src;\n      this.img.onload = () => {\n        const canvas = this.$refs.canvas;\n        canvas.width = this.img.width;\n        canvas.height = this.img.height;\n        this.ctx.drawImage(this.img, 0, 0);\n        this.isOverlayVisible = false; // 图片加载完成后隐藏遮罩层\n      };\n    },\n    // 开始选择区域\n    startSelect(event) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      if (this.isSelecting) {\n        this.selectionBox.width = x - this.startPoint.x;\n        this.selectionBox.height = y - this.startPoint.y;\n      } else {\n        this.startPoint = {\n          x,\n          y\n        };\n        this.selectionBox = {\n          x,\n          y,\n          width: 0,\n          height: 0\n        };\n        this.isSelecting = true;\n      }\n      this.redraw();\n    },\n    // 鼠标移动事件，更新选区或拖拽、缩放区域\n    mouseMove(event) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      if (this.isSelecting) {\n        this.selectionBox.width = x - this.startPoint.x;\n        this.selectionBox.height = y - this.startPoint.y;\n      }\n      if (this.isDragging) {\n        this.selectionBox.x = x - this.startDragPoint.x;\n        this.selectionBox.y = y - this.startDragPoint.y;\n      }\n      if (this.isResizing) {\n        const width = x - this.resizeStartPoint.x;\n        const height = y - this.resizeStartPoint.y;\n        this.selectionBox.width = width > 50 ? width : 50;\n        this.selectionBox.height = height > 50 ? height : 50;\n      }\n      this.redraw();\n    },\n    // 鼠标释放事件，结束选择、拖拽、缩放\n    mouseUp() {\n      if (this.isSelecting) {\n        this.isSelecting = false;\n        this.markRegion(); // 选择完成后标记区域\n      }\n      this.isDragging = false;\n      this.isResizing = false;\n    },\n    // 标记区域\n    markRegion() {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.selectionBox;\n      this.markedRegions.push({\n        x,\n        y,\n        width,\n        height\n      });\n      this.redraw(); // 重新绘制所有区域\n    },\n    // 开始拖拽区域\n    startDrag(event) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      this.startDragPoint = {\n        x,\n        y\n      };\n      this.isDragging = true;\n    },\n    // 开始调整区域大小\n    startResize(event) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      this.resizeStartPoint = {\n        x,\n        y\n      };\n      this.isResizing = true;\n    },\n    // 绘制画布内容\n    redraw() {\n      const canvas = this.$refs.canvas;\n      this.ctx.clearRect(0, 0, canvas.width, canvas.height); // 清除画布\n      this.ctx.drawImage(this.img, 0, 0); // 重新绘制图片\n\n      // 绘制已标记的区域\n      this.markedRegions.forEach(region => {\n        this.ctx.fillStyle = \"rgba(0, 255, 0, 0.5)\";\n        this.ctx.fillRect(region.x, region.y, region.width, region.height);\n      });\n\n      // 绘制当前选中的区域\n      if (this.isSelecting || this.isDragging || this.isResizing) {\n        this.ctx.strokeStyle = \"rgba(0, 0, 0, 0.8)\";\n        this.ctx.lineWidth = 2;\n        this.ctx.setLineDash([5, 3]);\n        this.ctx.strokeRect(this.selectionBox.x, this.selectionBox.y, this.selectionBox.width, this.selectionBox.height);\n      }\n    },\n    // 点击遮罩层时关闭遮罩\n    onOverlayClick() {\n      this.isOverlayVisible = false;\n    }\n  },\n  destroyed() {\n    const canvas = this.$refs.canvas;\n    canvas.removeEventListener(\"mousemove\", this.mouseMove);\n    canvas.removeEventListener(\"mouseup\", this.mouseUp);\n  }\n};","map":{"version":3,"names":["props","imageSrc","type","String","required","data","img","ctx","isSelecting","isResizing","isDragging","selectionBox","x","y","width","height","startPoint","startDragPoint","resizeStartPoint","isOverlayVisible","markedRegions","mounted","canvas","$refs","getContext","loadImage","addEventListener","mouseMove","mouseUp","methods","src","Image","onload","drawImage","startSelect","event","rect","getBoundingClientRect","clientX","left","clientY","top","redraw","markRegion","push","startDrag","startResize","clearRect","forEach","region","fillStyle","fillRect","strokeStyle","lineWidth","setLineDash","strokeRect","onOverlayClick","destroyed","removeEventListener"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div class=\"image-marking-container\">\n    <canvas ref=\"canvas\" class=\"canvas\" @mousedown=\"startSelect\" />\n    <div\n      class=\"overlay\"\n      v-show=\"isOverlayVisible\"\n      @mousedown=\"onOverlayClick\"\n    ></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      img: null, // 图片元素\n      ctx: null, // canvas 的上下文\n      isSelecting: false, // 是否正在选择区域\n      isResizing: false, // 是否正在调整区域大小\n      isDragging: false, // 是否正在拖拽区域\n      selectionBox: { x: 0, y: 0, width: 0, height: 0 }, // 选区信息\n      startPoint: null, // 选择区域的起点\n      startDragPoint: null, // 拖拽起点\n      resizeStartPoint: null, // 调整区域大小的起点\n      isOverlayVisible: true, // 是否显示遮罩层\n      markedRegions: [], // 标记区域列表\n    };\n  },\n  mounted() {\n    // 获取 canvas 上下文\n    const canvas = this.$refs.canvas;\n    this.ctx = canvas.getContext(\"2d\");\n\n    // 加载图片并绘制到 canvas 上\n    this.loadImage(this.imageSrc);\n\n    // 绑定事件\n    canvas.addEventListener(\"mousemove\", this.mouseMove);\n    canvas.addEventListener(\"mouseup\", this.mouseUp);\n  },\n  methods: {\n    // 加载图片\n    loadImage(src) {\n      this.img = new Image();\n      this.img.src = src;\n      this.img.onload = () => {\n        const canvas = this.$refs.canvas;\n        canvas.width = this.img.width;\n        canvas.height = this.img.height;\n        this.ctx.drawImage(this.img, 0, 0);\n        this.isOverlayVisible = false; // 图片加载完成后隐藏遮罩层\n      };\n    },\n\n    // 开始选择区域\n    startSelect(event) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n      if (this.isSelecting) {\n        this.selectionBox.width = x - this.startPoint.x;\n        this.selectionBox.height = y - this.startPoint.y;\n      } else {\n        this.startPoint = { x, y };\n        this.selectionBox = { x, y, width: 0, height: 0 };\n        this.isSelecting = true;\n      }\n      this.redraw();\n    },\n\n    // 鼠标移动事件，更新选区或拖拽、缩放区域\n    mouseMove(event) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n      if (this.isSelecting) {\n        this.selectionBox.width = x - this.startPoint.x;\n        this.selectionBox.height = y - this.startPoint.y;\n      }\n\n      if (this.isDragging) {\n        this.selectionBox.x = x - this.startDragPoint.x;\n        this.selectionBox.y = y - this.startDragPoint.y;\n      }\n\n      if (this.isResizing) {\n        const width = x - this.resizeStartPoint.x;\n        const height = y - this.resizeStartPoint.y;\n        this.selectionBox.width = width > 50 ? width : 50;\n        this.selectionBox.height = height > 50 ? height : 50;\n      }\n\n      this.redraw();\n    },\n\n    // 鼠标释放事件，结束选择、拖拽、缩放\n    mouseUp() {\n      if (this.isSelecting) {\n        this.isSelecting = false;\n        this.markRegion(); // 选择完成后标记区域\n      }\n      this.isDragging = false;\n      this.isResizing = false;\n    },\n\n    // 标记区域\n    markRegion() {\n      const { x, y, width, height } = this.selectionBox;\n      this.markedRegions.push({ x, y, width, height });\n      this.redraw(); // 重新绘制所有区域\n    },\n\n    // 开始拖拽区域\n    startDrag(event) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      this.startDragPoint = { x, y };\n      this.isDragging = true;\n    },\n\n    // 开始调整区域大小\n    startResize(event) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      this.resizeStartPoint = { x, y };\n      this.isResizing = true;\n    },\n\n    // 绘制画布内容\n    redraw() {\n      const canvas = this.$refs.canvas;\n      this.ctx.clearRect(0, 0, canvas.width, canvas.height); // 清除画布\n      this.ctx.drawImage(this.img, 0, 0); // 重新绘制图片\n\n      // 绘制已标记的区域\n      this.markedRegions.forEach((region) => {\n        this.ctx.fillStyle = \"rgba(0, 255, 0, 0.5)\";\n        this.ctx.fillRect(region.x, region.y, region.width, region.height);\n      });\n\n      // 绘制当前选中的区域\n      if (this.isSelecting || this.isDragging || this.isResizing) {\n        this.ctx.strokeStyle = \"rgba(0, 0, 0, 0.8)\";\n        this.ctx.lineWidth = 2;\n        this.ctx.setLineDash([5, 3]);\n        this.ctx.strokeRect(\n          this.selectionBox.x,\n          this.selectionBox.y,\n          this.selectionBox.width,\n          this.selectionBox.height\n        );\n      }\n    },\n\n    // 点击遮罩层时关闭遮罩\n    onOverlayClick() {\n      this.isOverlayVisible = false;\n    },\n  },\n  destroyed() {\n    const canvas = this.$refs.canvas;\n    canvas.removeEventListener(\"mousemove\", this.mouseMove);\n    canvas.removeEventListener(\"mouseup\", this.mouseUp);\n  },\n};\n</script>\n\n<style scoped>\n.image-marking-container {\n  position: relative;\n  display: inline-block;\n}\n\n.canvas {\n  display: block;\n  max-width: 100%;\n}\n\n.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.3);\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}