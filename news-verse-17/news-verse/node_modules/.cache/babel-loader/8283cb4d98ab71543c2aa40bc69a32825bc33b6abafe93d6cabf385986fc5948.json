{"ast":null,"code":"// const data = require(\"../assets/data.json\");\n// const data = require(\"../assets/final_output_1107.json\");\nimport { getCategotiesDataAPI, getKeywordsDataAPI } from \"@/api/index\";\nexport default {\n  data() {\n    return {\n      pageTitle: this.$route.query.title,\n      tableData: [],\n      currentPage: 1,\n      itemsPerPage: 5,\n      isDown: [false, false, false, false, false],\n      linkList: {},\n      topKeywords: [],\n      data: null,\n      loading: false\n    };\n  },\n  methods: {\n    goBack() {\n      this.$router.back();\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n      this.isDown = [false, false, false, false, false];\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n      this.isDown = [false, false, false, false, false];\n    },\n    downClick(i) {\n      this.$set(this.isDown, i, !this.isDown[i]);\n    },\n    getDomain(url) {\n      const start = url.indexOf(\"://\") + 3;\n      const end = url.indexOf(\"/\", start);\n      return end === -1 ? url.substring(start) : url.substring(start, end);\n    },\n    // filterNewsByKeyword(data, keyword) {\n    //   const filteredNews = {\n    //     item: [],\n    //   };\n\n    //   // 遍历每个大分类\n    //   for (const category in data) {\n    //     if (data[category]?.item) {\n    //       // 遍历每个分类下的新闻数组\n    //       data[category].item.forEach((newsItem) => {\n    //         const relevantSources = newsItem.news_sources.filter((source) =>\n    //           source.keywords.includes(keyword)\n    //         );\n\n    //         if (relevantSources.length > 0) {\n    //           filteredNews.item.push({\n    //             topic: newsItem.topic,\n    //             summary: newsItem.summary,\n    //             news_sources: newsItem.news_sources,\n    //           });\n    //         }\n    //       });\n    //     }\n    //   }\n\n    //   this.tableData = filteredNews;\n    //   this.pageTitle = keyword;\n    // },\n    async getData() {\n      this.loading = true;\n      try {\n        const res = await getCategotiesDataAPI();\n        this.data = res;\n        switch (this.$route.query.title) {\n          case \"Business\":\n            console.log(\"tableData\", this.data);\n            this.tableData = this.data.business;\n            break;\n          case \"Entertainment\":\n            this.tableData = this.data.entertainment;\n            break;\n          case \"General\":\n            this.tableData = this.data.general;\n            break;\n          case \"Health\":\n            this.tableData = this.data.health;\n            break;\n          case \"Science\":\n            this.tableData = this.data.science;\n            break;\n          case \"Sports\":\n            this.tableData = this.data.sports;\n            break;\n          case \"Technology\":\n            this.tableData = this.data.technology;\n            break;\n          default:\n            this.filterNewsByKeyword(this.data, this.$route.query.title);\n        }\n        this.loading = false;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getKeywords() {\n      try {\n        const res = await getKeywordsDataAPI();\n        this.topKeywords = res.slice(0, 10);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  },\n  computed: {\n    totalPages() {\n      if (this.tableData.length !== 0) {\n        return Math.ceil(this.tableData.item.length / this.itemsPerPage);\n      } else {\n        return null;\n      }\n    },\n    paginatedData() {\n      if (this.tableData.length !== 0) {\n        const start = (this.currentPage - 1) * this.itemsPerPage;\n        return this.tableData.item.slice(start, start + this.itemsPerPage);\n      } else {\n        return null;\n      }\n    }\n  },\n  created() {\n    this.getData();\n    this.getKeywords();\n    // switch (this.$route.query.title) {\n    //   case \"Business\":\n    //     this.getData();\n    //     console.log(\"tableData\", this.data);\n\n    //     this.tableData = this.data.business;\n    //     break;\n    //   case \"Entertainment\":\n    //     this.getData();\n    //     this.tableData = this.data.entertainment;\n    //     break;\n    //   case \"General\":\n    //     this.getData();\n    //     this.tableData = this.data.general;\n    //     break;\n    //   case \"Health\":\n    //     this.getData();\n    //     this.tableData = this.data.health;\n    //     break;\n    //   case \"Science\":\n    //     this.getData();\n    //     this.tableData = this.data.science;\n    //     break;\n    //   case \"Sports\":\n    //     this.getData();\n    //     this.tableData = this.data.sports;\n    //     break;\n    //   case \"Technology\":\n    //     this.getData();\n    //     this.tableData = this.data.technology;\n    //     break;\n    //   default:\n    //     this.filterNewsByKeyword(this.data, this.$route.query.title);\n    // }\n\n    // const getAllKeywords = (data) => {\n    //   const allKeywords = [];\n    //   Object.values(data).forEach((category) => {\n    //     category.item.forEach((topic) => {\n    //       topic.news_sources.forEach((news) => {\n    //         allKeywords.push(...news.keywords);\n    //       });\n    //     });\n    //   });\n    //   return allKeywords;\n    // };\n\n    // const countKeywords = (keywords) => {\n    //   return keywords.reduce((countMap, keyword) => {\n    //     countMap[keyword] = (countMap[keyword] || 0) + 1;\n    //     return countMap;\n    //   }, {});\n    // };\n\n    // const getTopKeywords = (keywordCount, topN = 10) => {\n    //   return Object.entries(keywordCount)\n    //     .sort((a, b) => b[1] - a[1]) // 按出现次数从高到低排序\n    //     .slice(0, topN) // 取前 topN 个\n    //     .map(([keyword, count]) => ({ keyword, count }));\n    // };\n\n    // const allKeywords = getAllKeywords(data);\n    // const keywordCount = countKeywords(allKeywords);\n    // const topKeywords = getTopKeywords(keywordCount);\n    // this.topKeywords = topKeywords;\n  }\n};","map":{"version":3,"names":["getCategotiesDataAPI","getKeywordsDataAPI","data","pageTitle","$route","query","title","tableData","currentPage","itemsPerPage","isDown","linkList","topKeywords","loading","methods","goBack","$router","back","nextPage","totalPages","prevPage","downClick","i","$set","getDomain","url","start","indexOf","end","substring","getData","res","console","log","business","entertainment","general","health","science","sports","technology","filterNewsByKeyword","error","getKeywords","slice","computed","length","Math","ceil","item","paginatedData","created"],"sources":["src/views/AboutView.vue"],"sourcesContent":["<template>\n  <div class=\"about\">\n    <div class=\"top\">\n      <div style=\"display: flex; padding: 10px; width: 40px\" @click=\"goBack\">\n        <i class=\"el-icon-back\" style=\"color: #fff; cursor: pointer\"></i>\n      </div>\n      <h1 class=\"title\">{{ pageTitle }}</h1>\n    </div>\n    <div class=\"content\">\n      <el-card style=\"background: #ece8d9; width: 78%\" v-loading=\"loading\">\n        <div>\n          <div v-for=\"(item, i) in paginatedData\" :key=\"i\">\n            <div class=\"itemContainer\">\n              <div class=\"textContainer\">\n                {{ item.topic }}\n              </div>\n              <div\n                v-if=\"!isDown[i]\"\n                @click=\"downClick(i)\"\n                style=\"cursor: pointer; font-size: 32px\"\n              >\n                <i class=\"el-icon-arrow-down\"></i>\n              </div>\n              <div\n                v-if=\"isDown[i]\"\n                @click=\"downClick(i)\"\n                style=\"cursor: pointer; font-size: 32px\"\n              >\n                <i class=\"el-icon-arrow-up\"></i>\n              </div>\n            </div>\n            <div v-if=\"isDown[i]\" class=\"summary\">\n              <el-card style=\"background: #e54f6d\">\n                <el-descriptions :title=\"item.topic\" :column=\"1\">\n                  <el-descriptions-item label=\"summary\">{{\n                    item.summary\n                  }}</el-descriptions-item>\n                </el-descriptions>\n                <div>\n                  <ul class=\"ul-item\">\n                    <li\n                      class=\"li-item\"\n                      v-for=\"(i, index) in item.news_sources\"\n                      :key=\"index\"\n                    >\n                      {{ i.title }}\n                      <el-link\n                        :href=\"'https://' + getDomain(i.url)\"\n                        target=\"_blank\"\n                        type=\"primary\"\n                        >{{ getDomain(i.url) }}</el-link\n                      >\n                      keyword:\n                      <span\n                        v-for=\"(kitem, k) in i.keywords\"\n                        @click=\"filterNewsByKeyword(data, kitem)\"\n                        style=\"\n                          margin: 0px 5px 0px 5px;\n                          color: #409eff;\n                          border-bottom: 1px solid #409eff;\n                          cursor: pointer;\n                        \"\n                        :key=\"k\"\n                        >{{ kitem }}</span\n                      >\n                      Score :{{ i.bias }}\n                      <el-popover\n                        placement=\"top-start\"\n                        width=\"600\"\n                        trigger=\"hover\"\n                        content=\"Stay informed with concise summaries and objective bias ratings across business, entertainment, health, science, sports, and technology news. Each category is organized by topic for streamlined browsing, while bias is rated from 0-3 (left-leaning), 4-6 (neutral), and 7-10 (right-leaning). Access diverse perspectives and make informed decisions with ease.\"\n                      >\n                        <el-button slot=\"reference\" type=\"text\"\n                          ><i class=\"el-icon-warning-outline\"></i\n                        ></el-button>\n                      </el-popover>\n                    </li>\n                  </ul>\n                </div>\n              </el-card>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"pagination\">\n          <button @click=\"prevPage\" :disabled=\"currentPage === 1\">\n            ← previous\n          </button>\n          <span>page {{ currentPage }} </span>\n          <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">\n            next →\n          </button>\n        </div>\n      </el-card>\n      <el-card\n        style=\"background: #ece8d9; width: 20%; margin-left: 20px\"\n        v-loading=\"loading\"\n      >\n        <div\n          v-for=\"(item, index) in topKeywords\"\n          :key=\"index\"\n          style=\"margin-top: 15px; cursor: pointer\"\n          @click=\"filterNewsByKeyword(data, item.keyword)\"\n        >\n          <div style=\"margin-bottom: 5px; font-weight: 700; font-size: 18px\">\n            {{ item.keyword }}\n          </div>\n          <div style=\"color: grey\">frequency:{{ item.frequency }}</div>\n        </div>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\n// const data = require(\"../assets/data.json\");\n// const data = require(\"../assets/final_output_1107.json\");\nimport { getCategotiesDataAPI, getKeywordsDataAPI } from \"@/api/index\";\n\nexport default {\n  data() {\n    return {\n      pageTitle: this.$route.query.title,\n      tableData: [],\n      currentPage: 1,\n      itemsPerPage: 5,\n      isDown: [false, false, false, false, false],\n      linkList: {},\n      topKeywords: [],\n      data: null,\n      loading: false,\n    };\n  },\n  methods: {\n    goBack() {\n      this.$router.back();\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n      this.isDown = [false, false, false, false, false];\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n      this.isDown = [false, false, false, false, false];\n    },\n    downClick(i) {\n      this.$set(this.isDown, i, !this.isDown[i]);\n    },\n    getDomain(url) {\n      const start = url.indexOf(\"://\") + 3;\n      const end = url.indexOf(\"/\", start);\n      return end === -1 ? url.substring(start) : url.substring(start, end);\n    },\n    // filterNewsByKeyword(data, keyword) {\n    //   const filteredNews = {\n    //     item: [],\n    //   };\n\n    //   // 遍历每个大分类\n    //   for (const category in data) {\n    //     if (data[category]?.item) {\n    //       // 遍历每个分类下的新闻数组\n    //       data[category].item.forEach((newsItem) => {\n    //         const relevantSources = newsItem.news_sources.filter((source) =>\n    //           source.keywords.includes(keyword)\n    //         );\n\n    //         if (relevantSources.length > 0) {\n    //           filteredNews.item.push({\n    //             topic: newsItem.topic,\n    //             summary: newsItem.summary,\n    //             news_sources: newsItem.news_sources,\n    //           });\n    //         }\n    //       });\n    //     }\n    //   }\n\n    //   this.tableData = filteredNews;\n    //   this.pageTitle = keyword;\n    // },\n    async getData() {\n      this.loading = true;\n      try {\n        const res = await getCategotiesDataAPI();\n        this.data = res;\n        switch (this.$route.query.title) {\n          case \"Business\":\n            console.log(\"tableData\", this.data);\n            this.tableData = this.data.business;\n            break;\n          case \"Entertainment\":\n            this.tableData = this.data.entertainment;\n            break;\n          case \"General\":\n            this.tableData = this.data.general;\n            break;\n          case \"Health\":\n            this.tableData = this.data.health;\n            break;\n          case \"Science\":\n            this.tableData = this.data.science;\n            break;\n          case \"Sports\":\n            this.tableData = this.data.sports;\n            break;\n          case \"Technology\":\n            this.tableData = this.data.technology;\n            break;\n          default:\n            this.filterNewsByKeyword(this.data, this.$route.query.title);\n        }\n        this.loading = false;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getKeywords() {\n      try {\n        const res = await getKeywordsDataAPI();\n        this.topKeywords = res.slice(0, 10);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n  computed: {\n    totalPages() {\n      if (this.tableData.length !== 0) {\n        return Math.ceil(this.tableData.item.length / this.itemsPerPage);\n      } else {\n        return null;\n      }\n    },\n    paginatedData() {\n      if (this.tableData.length !== 0) {\n        const start = (this.currentPage - 1) * this.itemsPerPage;\n        return this.tableData.item.slice(start, start + this.itemsPerPage);\n      } else {\n        return null;\n      }\n    },\n  },\n  created() {\n    this.getData();\n    this.getKeywords();\n    // switch (this.$route.query.title) {\n    //   case \"Business\":\n    //     this.getData();\n    //     console.log(\"tableData\", this.data);\n\n    //     this.tableData = this.data.business;\n    //     break;\n    //   case \"Entertainment\":\n    //     this.getData();\n    //     this.tableData = this.data.entertainment;\n    //     break;\n    //   case \"General\":\n    //     this.getData();\n    //     this.tableData = this.data.general;\n    //     break;\n    //   case \"Health\":\n    //     this.getData();\n    //     this.tableData = this.data.health;\n    //     break;\n    //   case \"Science\":\n    //     this.getData();\n    //     this.tableData = this.data.science;\n    //     break;\n    //   case \"Sports\":\n    //     this.getData();\n    //     this.tableData = this.data.sports;\n    //     break;\n    //   case \"Technology\":\n    //     this.getData();\n    //     this.tableData = this.data.technology;\n    //     break;\n    //   default:\n    //     this.filterNewsByKeyword(this.data, this.$route.query.title);\n    // }\n\n    // const getAllKeywords = (data) => {\n    //   const allKeywords = [];\n    //   Object.values(data).forEach((category) => {\n    //     category.item.forEach((topic) => {\n    //       topic.news_sources.forEach((news) => {\n    //         allKeywords.push(...news.keywords);\n    //       });\n    //     });\n    //   });\n    //   return allKeywords;\n    // };\n\n    // const countKeywords = (keywords) => {\n    //   return keywords.reduce((countMap, keyword) => {\n    //     countMap[keyword] = (countMap[keyword] || 0) + 1;\n    //     return countMap;\n    //   }, {});\n    // };\n\n    // const getTopKeywords = (keywordCount, topN = 10) => {\n    //   return Object.entries(keywordCount)\n    //     .sort((a, b) => b[1] - a[1]) // 按出现次数从高到低排序\n    //     .slice(0, topN) // 取前 topN 个\n    //     .map(([keyword, count]) => ({ keyword, count }));\n    // };\n\n    // const allKeywords = getAllKeywords(data);\n    // const keywordCount = countKeywords(allKeywords);\n    // const topKeywords = getTopKeywords(keywordCount);\n    // this.topKeywords = topKeywords;\n  },\n};\n</script>\n\n<style scoped>\n@font-face {\n  font-family: \"knorke\";\n  src: url(\"../assets/font/Knorke.ttf\");\n}\n.about {\n  background: #494949;\n}\n.title {\n  font-family: \"knorke\";\n  color: #d7d1d1;\n}\n.top {\n}\n.content {\n  padding: 0px 100px 100px 100px;\n  display: flex;\n}\n.content-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  background: #f1f1f1;\n  border: 1px solid #ccc;\n  padding: 20px;\n  text-align: center;\n}\n.pagination {\n  margin-top: 20px;\n}\nbutton {\n  margin: 0 5px;\n}\n.textContainer {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 32px;\n}\n.itemContainer {\n  margin: 40px;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: #ccc;\n  border-radius: 10px;\n}\n.summary {\n  margin: 40px;\n  padding: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.ul-item {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  font-size: 12px;\n}\n.li-item {\n  text-align: left;\n}\n::v-deep .el-descriptions__table {\n  background: #e54f6d;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}