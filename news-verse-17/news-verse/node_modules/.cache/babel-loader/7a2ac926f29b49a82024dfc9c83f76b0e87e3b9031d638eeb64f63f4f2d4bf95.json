{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [],\n      isDrawing: false,\n      startX: 0,\n      startY: 0,\n      ctx: null,\n      isResizing: false,\n      isDragging: false,\n      activeSelection: null,\n      // 当前可操作区域\n      dragStartX: 0,\n      dragStartY: 0,\n      resizingEdge: null,\n      // 当前是否处于缩放模式\n      showOverlay: false // 显示遮罩层\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\";\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0);\n    },\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      if (this.activeSelection && this.isInsideSelection(x, y)) {\n        // 如果点击在已选区域内，则可以拖拽或者缩放\n        this.isDragging = true;\n        this.dragStartX = x - this.activeSelection.x;\n        this.dragStartY = y - this.activeSelection.y;\n        this.showOverlay = true;\n        return;\n      }\n      if (this.isDrawing) return;\n      this.startX = x;\n      this.startY = y;\n      this.isDrawing = true;\n      this.showOverlay = true;\n    },\n    draw(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n        if (this.activeSelection) {\n          this.selection.forEach(area => this.drawSelection(area));\n        }\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        const width = x - this.startX;\n        const height = y - this.startY;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      }\n    },\n    endDrawing(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        if (this.activeSelection) {\n          this.selection.push({\n            x: this.startX,\n            y: this.startY,\n            width: x - this.startX,\n            height: y - this.startY,\n            isResizable: true // 新选区可以调整大小\n          });\n        } else {\n          this.activeSelection = {\n            x: this.startX,\n            y: this.startY,\n            width: x - this.startX,\n            height: y - this.startY,\n            isResizable: true\n          };\n        }\n        this.isDrawing = false;\n        this.showOverlay = false;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n        if (this.activeSelection) {\n          this.selection.forEach(area => this.drawSelection(area));\n        }\n      }\n    },\n    drawSelection(area) {\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n    },\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    isInsideSelection(x, y) {\n      return x >= this.activeSelection.x && x <= this.activeSelection.x + this.activeSelection.width && y >= this.activeSelection.y && y <= this.activeSelection.y + this.activeSelection.height;\n    },\n    resizeSelection(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      if (this.resizingEdge === \"bottom-right\") {\n        const width = x - this.activeSelection.x;\n        const height = y - this.activeSelection.y;\n        this.activeSelection.width = width;\n        this.activeSelection.height = height;\n      }\n    },\n    handleMouseMove(e) {\n      if (this.isDragging) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        this.activeSelection.x = x - this.dragStartX;\n        this.activeSelection.y = y - this.dragStartY;\n      } else if (this.resizingEdge) {\n        this.resizeSelection(e);\n      }\n    },\n    stopInteraction(e) {\n      this.isDragging = false;\n      this.resizingEdge = null;\n      this.showOverlay = false;\n    },\n    // 获取选区内的数据\n    getSelectedAreas() {\n      return this.selection;\n    }\n  },\n  watch: {\n    activeSelection(newSelection) {\n      if (newSelection) {\n        this.selection.push(newSelection);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","canvasWidth","canvasHeight","image","Image","selection","isDrawing","startX","startY","ctx","isResizing","isDragging","activeSelection","dragStartX","dragStartY","resizingEdge","showOverlay","mounted","$refs","canvas","getContext","src","imageSrc","onload","onImageLoad","props","type","String","required","methods","width","height","drawImage","startDrawing","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","isInsideSelection","draw","clearCanvas","forEach","area","drawSelection","strokeStyle","lineWidth","strokeRect","endDrawing","push","isResizable","clearRect","resizeSelection","handleMouseMove","stopInteraction","getSelectedAreas","watch","newSelection"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas\n      ref=\"canvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousedown=\"startDrawing\"\n      @mousemove=\"draw\"\n      @mouseup=\"endDrawing\"\n      @mouseleave=\"endDrawing\"\n    ></canvas>\n    <div v-if=\"showOverlay\" class=\"overlay\"></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [],\n      isDrawing: false,\n      startX: 0,\n      startY: 0,\n      ctx: null,\n      isResizing: false,\n      isDragging: false,\n      activeSelection: null, // 当前可操作区域\n      dragStartX: 0,\n      dragStartY: 0,\n      resizingEdge: null, // 当前是否处于缩放模式\n      showOverlay: false, // 显示遮罩层\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\";\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0);\n    },\n\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      if (this.activeSelection && this.isInsideSelection(x, y)) {\n        // 如果点击在已选区域内，则可以拖拽或者缩放\n        this.isDragging = true;\n        this.dragStartX = x - this.activeSelection.x;\n        this.dragStartY = y - this.activeSelection.y;\n        this.showOverlay = true;\n        return;\n      }\n\n      if (this.isDrawing) return;\n\n      this.startX = x;\n      this.startY = y;\n      this.isDrawing = true;\n      this.showOverlay = true;\n    },\n\n    draw(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n\n        if (this.activeSelection) {\n          this.selection.forEach((area) => this.drawSelection(area));\n        }\n\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        const width = x - this.startX;\n        const height = y - this.startY;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      }\n    },\n\n    endDrawing(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        if (this.activeSelection) {\n          this.selection.push({\n            x: this.startX,\n            y: this.startY,\n            width: x - this.startX,\n            height: y - this.startY,\n            isResizable: true, // 新选区可以调整大小\n          });\n        } else {\n          this.activeSelection = {\n            x: this.startX,\n            y: this.startY,\n            width: x - this.startX,\n            height: y - this.startY,\n            isResizable: true,\n          };\n        }\n\n        this.isDrawing = false;\n        this.showOverlay = false;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n\n        if (this.activeSelection) {\n          this.selection.forEach((area) => this.drawSelection(area));\n        }\n      }\n    },\n\n    drawSelection(area) {\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n    },\n\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    isInsideSelection(x, y) {\n      return (\n        x >= this.activeSelection.x &&\n        x <= this.activeSelection.x + this.activeSelection.width &&\n        y >= this.activeSelection.y &&\n        y <= this.activeSelection.y + this.activeSelection.height\n      );\n    },\n\n    resizeSelection(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      if (this.resizingEdge === \"bottom-right\") {\n        const width = x - this.activeSelection.x;\n        const height = y - this.activeSelection.y;\n        this.activeSelection.width = width;\n        this.activeSelection.height = height;\n      }\n    },\n\n    handleMouseMove(e) {\n      if (this.isDragging) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        this.activeSelection.x = x - this.dragStartX;\n        this.activeSelection.y = y - this.dragStartY;\n      } else if (this.resizingEdge) {\n        this.resizeSelection(e);\n      }\n    },\n\n    stopInteraction(e) {\n      this.isDragging = false;\n      this.resizingEdge = null;\n      this.showOverlay = false;\n    },\n\n    // 获取选区内的数据\n    getSelectedAreas() {\n      return this.selection;\n    },\n  },\n  watch: {\n    activeSelection(newSelection) {\n      if (newSelection) {\n        this.selection.push(newSelection);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\ncanvas {\n  border: 1px solid #000;\n  cursor: crosshair;\n  position: relative;\n}\n\n.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 1;\n}\n\n.selection {\n  position: absolute;\n  border: 2px solid red;\n  cursor: pointer;\n}\n\n.selection .resize-handle {\n  width: 10px;\n  height: 10px;\n  background: red;\n  position: absolute;\n  bottom: -5px;\n  right: -5px;\n  cursor: se-resize;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}