{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageSrc: String\n  },\n  data() {\n    return {\n      img: null,\n      mainSelection: {\n        x: 50,\n        y: 50,\n        width: 200,\n        height: 150,\n        children: []\n      },\n      // 父选区和子区域的结构\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      activeChildIndex: null // 当前操作的子区域索引\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    }\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n      // 初始化选区\n      this.mainSelection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5,\n        children: []\n      };\n      this.drawCanvas();\n    },\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(ctx);\n\n      // 绘制父选区和子区域\n      this.drawSelection(ctx, this.mainSelection);\n    },\n    // 绘制父选区和子区域\n    drawSelection(ctx, selection) {\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(selection.x, selection.y, selection.width, selection.height);\n\n      // 绘制子区域\n      selection.children.forEach(child => {\n        ctx.strokeStyle = \"green\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(child.x, child.y, child.width, child.height);\n        this.drawControlPoints(ctx, child, true); // 绘制子区域控制点\n      });\n\n      // 绘制父选区的控制点\n      this.drawControlPoints(ctx, selection);\n    },\n    drawControlPoints(ctx, selection, isChild = false) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = selection;\n      const controlPoints = [{\n        x: x,\n        y: y\n      }, {\n        x: x + width,\n        y: y\n      }, {\n        x: x,\n        y: y + height\n      }, {\n        x: x + width,\n        y: y + height\n      }];\n      ctx.fillStyle = isChild ? \"green\" : \"blue\";\n      controlPoints.forEach(point => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n    drawOverlay(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.mainSelection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n      ctx.fillRect(0, 0, ctx.canvas.width, y);\n      ctx.fillRect(0, y + height, ctx.canvas.width, ctx.canvas.height - (y + height));\n      ctx.fillRect(0, y, x, height);\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height);\n    },\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      console.log(x);\n\n      // 检查是否点击在子区域内\n      const clickedChildIndex = this.getClickedChildIndex(x, y);\n      if (clickedChildIndex !== null) {\n        // 操作现有的子区域\n        this.activeChildIndex = clickedChildIndex;\n        const clickedCorner = this.getClickedCorner(x, y, this.mainSelection.children[this.activeChildIndex]);\n        if (clickedCorner !== null) {\n          this.isResizing = true;\n          this.resizeCorner = clickedCorner;\n        }\n      } else if (this.isWithinMainSelection(x, y)) {\n        // 在父选区内创建新的子区域\n        this.mainSelection.children.push({\n          x: x,\n          y: y,\n          width: 50,\n          height: 50\n        });\n        this.drawCanvas();\n      }\n    },\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 调整子区域大小\n      this.resizeSelection(x, y, true);\n      this.drawCanvas();\n    },\n    onMouseUp() {\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n    isWithinMainSelection(x, y) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = this.mainSelection;\n      return x >= selX && x <= selX + width && y >= selY && y <= selY + height;\n    },\n    getClickedChildIndex(x, y) {\n      return this.mainSelection.children.findIndex(child => x >= child.x && x <= child.x + child.width && y >= child.y && y <= child.y + child.height);\n    },\n    getClickedCorner(x, y, selection) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = selection;\n      const corners = [{\n        x: selX,\n        y: selY\n      }, {\n        x: selX + width,\n        y: selY\n      }, {\n        x: selX,\n        y: selY + height\n      }, {\n        x: selX + width,\n        y: selY + height\n      }];\n      return corners.findIndex(corner => Math.abs(corner.x - x) < this.controlSize && Math.abs(corner.y - y) < this.controlSize);\n    },\n    resizeSelection(x, y) {\n      const selection = this.mainSelection.children[this.activeChildIndex];\n      const {\n        x: selX,\n        y: selY\n      } = selection;\n      switch (this.resizeCorner) {\n        case 0:\n          selection.width += selX - x;\n          selection.height += selY - y;\n          selection.x = x;\n          selection.y = y;\n          break;\n        case 1:\n          selection.width = x - selX;\n          selection.height += selY - y;\n          selection.y = y;\n          break;\n        case 2:\n          selection.width += selX - x;\n          selection.height = y - selY;\n          selection.x = x;\n          break;\n        case 3:\n          selection.width = x - selX;\n          selection.height = y - selY;\n          break;\n      }\n      selection.width = Math.max(20, selection.width);\n      selection.height = Math.max(20, selection.height);\n    },\n    sendSelection() {\n      const selectionData = {\n        parent: {\n          x: this.mainSelection.x,\n          y: this.mainSelection.y,\n          width: this.mainSelection.width,\n          height: this.mainSelection.height\n        },\n        children: this.mainSelection.children\n      };\n      this.$emit(\"sendSelection\", selectionData);\n    }\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","String","data","img","mainSelection","x","y","width","height","children","isResizing","resizeCorner","controlSize","activeChildIndex","watch","newSrc","loadImage","methods","src","Image","onload","setCanvasAndSelection","canvas","$refs","drawCanvas","ctx","getContext","clearRect","drawImage","drawOverlay","drawSelection","selection","strokeStyle","lineWidth","strokeRect","forEach","child","drawControlPoints","isChild","controlPoints","fillStyle","point","beginPath","arc","Math","PI","fill","fillRect","onMouseDown","event","canvasRect","getBoundingClientRect","clientX","left","clientY","top","console","log","clickedChildIndex","getClickedChildIndex","clickedCorner","getClickedCorner","isWithinMainSelection","push","onMouseMove","resizeSelection","onMouseUp","selX","selY","findIndex","corners","corner","abs","max","sendSelection","selectionData","parent","$emit","mounted"],"sources":["src/components/CanvasTest.vue"],"sourcesContent":["<template>\n  <div class=\"image-cropper\">\n    <canvas\n      ref=\"canvas\"\n      @mousedown=\"onMouseDown\"\n      @mouseup=\"onMouseUp\"\n      @mousemove=\"onMouseMove\"\n    ></canvas>\n    <button @click=\"sendSelection\">发送选中范围</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: String,\n  },\n  data() {\n    return {\n      img: null,\n      mainSelection: { x: 50, y: 50, width: 200, height: 150, children: [] }, // 父选区和子区域的结构\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      activeChildIndex: null, // 当前操作的子区域索引\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    },\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n      // 初始化选区\n      this.mainSelection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5,\n        children: [],\n      };\n      this.drawCanvas();\n    },\n\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(ctx);\n\n      // 绘制父选区和子区域\n      this.drawSelection(ctx, this.mainSelection);\n    },\n\n    // 绘制父选区和子区域\n    drawSelection(ctx, selection) {\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(\n        selection.x,\n        selection.y,\n        selection.width,\n        selection.height\n      );\n\n      // 绘制子区域\n      selection.children.forEach((child) => {\n        ctx.strokeStyle = \"green\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(child.x, child.y, child.width, child.height);\n        this.drawControlPoints(ctx, child, true); // 绘制子区域控制点\n      });\n\n      // 绘制父选区的控制点\n      this.drawControlPoints(ctx, selection);\n    },\n\n    drawControlPoints(ctx, selection, isChild = false) {\n      const { x, y, width, height } = selection;\n      const controlPoints = [\n        { x: x, y: y },\n        { x: x + width, y: y },\n        { x: x, y: y + height },\n        { x: x + width, y: y + height },\n      ];\n\n      ctx.fillStyle = isChild ? \"green\" : \"blue\";\n      controlPoints.forEach((point) => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n\n    drawOverlay(ctx) {\n      const { x, y, width, height } = this.mainSelection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n      ctx.fillRect(0, 0, ctx.canvas.width, y);\n      ctx.fillRect(\n        0,\n        y + height,\n        ctx.canvas.width,\n        ctx.canvas.height - (y + height)\n      );\n      ctx.fillRect(0, y, x, height);\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height);\n    },\n\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      console.log(x);\n\n      // 检查是否点击在子区域内\n      const clickedChildIndex = this.getClickedChildIndex(x, y);\n\n      if (clickedChildIndex !== null) {\n        // 操作现有的子区域\n        this.activeChildIndex = clickedChildIndex;\n        const clickedCorner = this.getClickedCorner(\n          x,\n          y,\n          this.mainSelection.children[this.activeChildIndex]\n        );\n        if (clickedCorner !== null) {\n          this.isResizing = true;\n          this.resizeCorner = clickedCorner;\n        }\n      } else if (this.isWithinMainSelection(x, y)) {\n        // 在父选区内创建新的子区域\n        this.mainSelection.children.push({\n          x: x,\n          y: y,\n          width: 50,\n          height: 50,\n        });\n        this.drawCanvas();\n      }\n    },\n\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 调整子区域大小\n      this.resizeSelection(x, y, true);\n      this.drawCanvas();\n    },\n\n    onMouseUp() {\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n\n    isWithinMainSelection(x, y) {\n      const { x: selX, y: selY, width, height } = this.mainSelection;\n      return x >= selX && x <= selX + width && y >= selY && y <= selY + height;\n    },\n\n    getClickedChildIndex(x, y) {\n      return this.mainSelection.children.findIndex(\n        (child) =>\n          x >= child.x &&\n          x <= child.x + child.width &&\n          y >= child.y &&\n          y <= child.y + child.height\n      );\n    },\n\n    getClickedCorner(x, y, selection) {\n      const { x: selX, y: selY, width, height } = selection;\n      const corners = [\n        { x: selX, y: selY },\n        { x: selX + width, y: selY },\n        { x: selX, y: selY + height },\n        { x: selX + width, y: selY + height },\n      ];\n\n      return corners.findIndex(\n        (corner) =>\n          Math.abs(corner.x - x) < this.controlSize &&\n          Math.abs(corner.y - y) < this.controlSize\n      );\n    },\n\n    resizeSelection(x, y) {\n      const selection = this.mainSelection.children[this.activeChildIndex];\n      const { x: selX, y: selY } = selection;\n\n      switch (this.resizeCorner) {\n        case 0:\n          selection.width += selX - x;\n          selection.height += selY - y;\n          selection.x = x;\n          selection.y = y;\n          break;\n        case 1:\n          selection.width = x - selX;\n          selection.height += selY - y;\n          selection.y = y;\n          break;\n        case 2:\n          selection.width += selX - x;\n          selection.height = y - selY;\n          selection.x = x;\n          break;\n        case 3:\n          selection.width = x - selX;\n          selection.height = y - selY;\n          break;\n      }\n\n      selection.width = Math.max(20, selection.width);\n      selection.height = Math.max(20, selection.height);\n    },\n\n    sendSelection() {\n      const selectionData = {\n        parent: {\n          x: this.mainSelection.x,\n          y: this.mainSelection.y,\n          width: this.mainSelection.width,\n          height: this.mainSelection.height,\n        },\n        children: this.mainSelection.children,\n      };\n      this.$emit(\"sendSelection\", selectionData);\n    },\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.image-cropper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\ncanvas {\n  border: 1px solid #000;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}