{"ast":null,"code":"export default {\n  props: {\n    imageSrc: String\n  },\n  data() {\n    return {\n      img: null,\n      selection: {\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100\n      },\n      // 初始选区\n      isDragging: false,\n      isResizing: false,\n      resizeCorner: null,\n      // 缩放的控制点位置\n      offsetX: 0,\n      offsetY: 0,\n      controlSize: 8 // 控制点的大小\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    }\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n      this.selection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5\n      };\n      this.drawCanvas();\n    },\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制选区\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(this.selection.x, this.selection.y, this.selection.width, this.selection.height);\n\n      // 绘制控制点\n      this.drawControlPoints(ctx);\n    },\n    drawControlPoints(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.selection;\n      const controlPoints = [{\n        x: x,\n        y: y\n      },\n      // 左上角\n      {\n        x: x + width,\n        y: y\n      },\n      // 右上角\n      {\n        x: x,\n        y: y + height\n      },\n      // 左下角\n      {\n        x: x + width,\n        y: y + height\n      } // 右下角\n      ];\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach(point => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 检查是否点击了控制点\n      const clickedCorner = this.getClickedCorner(x, y);\n      if (clickedCorner !== null) {\n        this.isResizing = true;\n        this.resizeCorner = clickedCorner;\n      } else if (x > this.selection.x && x < this.selection.x + this.selection.width && y > this.selection.y && y < this.selection.y + this.selection.height) {\n        // 启用拖动模式\n        this.isDragging = true;\n        this.offsetX = x - this.selection.x;\n        this.offsetY = y - this.selection.y;\n      }\n    },\n    onMouseMove(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      if (this.isDragging) {\n        // 更新拖动选区位置\n        this.selection.x = x - this.offsetX;\n        this.selection.y = y - this.offsetY;\n        this.drawCanvas();\n      } else if (this.isResizing) {\n        // 更新选区大小\n        this.resizeSelection(x, y);\n        this.drawCanvas();\n      }\n    },\n    onMouseUp() {\n      this.isDragging = false;\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n    getClickedCorner(x, y) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = this.selection;\n      const corners = [{\n        x: selX,\n        y: selY\n      }, {\n        x: selX + width,\n        y: selY\n      }, {\n        x: selX,\n        y: selY + height\n      }, {\n        x: selX + width,\n        y: selY + height\n      }];\n      return corners.findIndex(corner => Math.abs(corner.x - x) < this.controlSize && Math.abs(corner.y - y) < this.controlSize);\n    },\n    resizeSelection(x, y) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = this.selection;\n      switch (this.resizeCorner) {\n        case 0:\n          // 左上角\n          this.selection.width += this.selection.x - x;\n          this.selection.height += this.selection.y - y;\n          this.selection.x = x;\n          this.selection.y = y;\n          break;\n        case 1:\n          // 右上角\n          this.selection.width = x - selX;\n          this.selection.height += selY - y;\n          this.selection.y = y;\n          break;\n        case 2:\n          // 左下角\n          this.selection.width += selX - x;\n          this.selection.height = y - selY;\n          this.selection.x = x;\n          break;\n        case 3:\n          // 右下角\n          this.selection.width = x - selX;\n          this.selection.height = y - selY;\n          break;\n      }\n    },\n    sendSelection() {\n      const selectionData = {\n        x: this.selection.x,\n        y: this.selection.y,\n        width: this.selection.width,\n        height: this.selection.height\n      };\n      this.$emit(\"sendSelection\", selectionData);\n    }\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","String","data","img","selection","x","y","width","height","isDragging","isResizing","resizeCorner","offsetX","offsetY","controlSize","watch","newSrc","loadImage","methods","src","Image","onload","setCanvasAndSelection","canvas","$refs","drawCanvas","ctx","getContext","clearRect","drawImage","strokeStyle","lineWidth","strokeRect","drawControlPoints","controlPoints","fillStyle","forEach","point","beginPath","arc","Math","PI","fill","onMouseDown","event","canvasRect","getBoundingClientRect","clientX","left","clientY","top","clickedCorner","getClickedCorner","onMouseMove","resizeSelection","onMouseUp","selX","selY","corners","findIndex","corner","abs","sendSelection","selectionData","$emit","mounted"],"sources":["src/components/CanvasTest.vue"],"sourcesContent":["<template>\n  <div class=\"image-cropper\">\n    <canvas\n      ref=\"canvas\"\n      @mousedown=\"onMouseDown\"\n      @mouseup=\"onMouseUp\"\n      @mousemove=\"onMouseMove\"\n    ></canvas>\n    <button @click=\"sendSelection\">发送选中范围</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: String,\n  },\n  data() {\n    return {\n      img: null,\n      selection: { x: 50, y: 50, width: 100, height: 100 }, // 初始选区\n      isDragging: false,\n      isResizing: false,\n      resizeCorner: null, // 缩放的控制点位置\n      offsetX: 0,\n      offsetY: 0,\n      controlSize: 8, // 控制点的大小\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    },\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n\n      this.selection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5,\n      };\n\n      this.drawCanvas();\n    },\n\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制选区\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(\n        this.selection.x,\n        this.selection.y,\n        this.selection.width,\n        this.selection.height\n      );\n\n      // 绘制控制点\n      this.drawControlPoints(ctx);\n    },\n\n    drawControlPoints(ctx) {\n      const { x, y, width, height } = this.selection;\n      const controlPoints = [\n        { x: x, y: y }, // 左上角\n        { x: x + width, y: y }, // 右上角\n        { x: x, y: y + height }, // 左下角\n        { x: x + width, y: y + height }, // 右下角\n      ];\n\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach((point) => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // 检查是否点击了控制点\n      const clickedCorner = this.getClickedCorner(x, y);\n      if (clickedCorner !== null) {\n        this.isResizing = true;\n        this.resizeCorner = clickedCorner;\n      } else if (\n        x > this.selection.x &&\n        x < this.selection.x + this.selection.width &&\n        y > this.selection.y &&\n        y < this.selection.y + this.selection.height\n      ) {\n        // 启用拖动模式\n        this.isDragging = true;\n        this.offsetX = x - this.selection.x;\n        this.offsetY = y - this.selection.y;\n      }\n    },\n\n    onMouseMove(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      if (this.isDragging) {\n        // 更新拖动选区位置\n        this.selection.x = x - this.offsetX;\n        this.selection.y = y - this.offsetY;\n        this.drawCanvas();\n      } else if (this.isResizing) {\n        // 更新选区大小\n        this.resizeSelection(x, y);\n        this.drawCanvas();\n      }\n    },\n\n    onMouseUp() {\n      this.isDragging = false;\n      this.isResizing = false;\n      this.resizeCorner = null;\n    },\n\n    getClickedCorner(x, y) {\n      const { x: selX, y: selY, width, height } = this.selection;\n      const corners = [\n        { x: selX, y: selY },\n        { x: selX + width, y: selY },\n        { x: selX, y: selY + height },\n        { x: selX + width, y: selY + height },\n      ];\n\n      return corners.findIndex(\n        (corner) =>\n          Math.abs(corner.x - x) < this.controlSize &&\n          Math.abs(corner.y - y) < this.controlSize\n      );\n    },\n\n    resizeSelection(x, y) {\n      const { x: selX, y: selY, width, height } = this.selection;\n      switch (this.resizeCorner) {\n        case 0: // 左上角\n          this.selection.width += this.selection.x - x;\n          this.selection.height += this.selection.y - y;\n          this.selection.x = x;\n          this.selection.y = y;\n          break;\n        case 1: // 右上角\n          this.selection.width = x - selX;\n          this.selection.height += selY - y;\n          this.selection.y = y;\n          break;\n        case 2: // 左下角\n          this.selection.width += selX - x;\n          this.selection.height = y - selY;\n          this.selection.x = x;\n          break;\n        case 3: // 右下角\n          this.selection.width = x - selX;\n          this.selection.height = y - selY;\n          break;\n      }\n    },\n\n    sendSelection() {\n      const selectionData = {\n        x: this.selection.x,\n        y: this.selection.y,\n        width: this.selection.width,\n        height: this.selection.height,\n      };\n      this.$emit(\"sendSelection\", selectionData);\n    },\n  },\n  mounted() {\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.image-cropper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\ncanvas {\n  border: 1px solid #000;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}