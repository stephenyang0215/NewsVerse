{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageUrl: {\n      type: String,\n      required: true\n    },\n    initialSelectedAreas: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      isSelecting: false,\n      selectionStart: {\n        x: 0,\n        y: 0\n      },\n      selectionEnd: {\n        x: 0,\n        y: 0\n      },\n      selectedAreas: this.initialSelectedAreas // 通过 prop 传入初始选中区域\n    };\n  },\n  computed: {\n    selectionBoxStyle() {\n      const width = Math.abs(this.selectionEnd.x - this.selectionStart.x);\n      const height = Math.abs(this.selectionEnd.y - this.selectionStart.y);\n      const left = Math.min(this.selectionStart.x, this.selectionEnd.x);\n      const top = Math.min(this.selectionStart.y, this.selectionEnd.y);\n      return {\n        width: `${width}px`,\n        height: `${height}px`,\n        left: `${left}px`,\n        top: `${top}px`,\n        border: \"2px dashed rgba(0, 0, 255, 0.5)\",\n        position: \"absolute\",\n        pointerEvents: \"none\"\n      };\n    }\n  },\n  methods: {\n    onMouseDown(event) {\n      const {\n        offsetX,\n        offsetY\n      } = event;\n      this.isSelecting = true;\n      this.selectionStart = {\n        x: offsetX,\n        y: offsetY\n      };\n      this.selectionEnd = {\n        x: offsetX,\n        y: offsetY\n      };\n    },\n    onMouseUp() {\n      if (this.isSelecting) {\n        this.isSelecting = false;\n        const area = {\n          x1: Math.min(this.selectionStart.x, this.selectionEnd.x),\n          y1: Math.min(this.selectionStart.y, this.selectionEnd.y),\n          x2: Math.max(this.selectionStart.x, this.selectionEnd.x),\n          y2: Math.max(this.selectionStart.y, this.selectionEnd.y)\n        };\n        this.selectedAreas.push(area);\n        this.sendAreasToBackend(); // 发送到后端\n      }\n    },\n    onMouseMove(event) {\n      if (this.isSelecting) {\n        this.selectionEnd = {\n          x: event.offsetX,\n          y: event.offsetY\n        };\n      }\n    },\n    getAreaStyle(area) {\n      return {\n        position: \"absolute\",\n        left: `${area.x1}px`,\n        top: `${area.y1}px`,\n        width: `${area.x2 - area.x1}px`,\n        height: `${area.y2 - area.y1}px`,\n        backgroundColor: \"rgba(0, 0, 255, 0.3)\",\n        border: \"2px solid rgba(0, 0, 255, 0.5)\",\n        pointerEvents: \"none\"\n      };\n    },\n    sendAreasToBackend() {\n      // 将区域信息发送到后端\n      this.$axios.post(\"/api/save-areas\", {\n        areas: this.selectedAreas\n      }).then(response => {\n        console.log(\"Areas saved successfully:\", response);\n      }).catch(error => {\n        console.error(\"Failed to save areas:\", error);\n      });\n    }\n  },\n  watch: {\n    selectedAreas(newValue) {\n      // 当 selectedAreas 更新时，将数据存储在本地，或者发送给后端\n      localStorage.setItem(\"selectedAreas\", JSON.stringify(newValue));\n    }\n  },\n  created() {\n    const savedAreas = localStorage.getItem(\"selectedAreas\");\n    if (savedAreas) {\n      this.selectedAreas = JSON.parse(savedAreas);\n    }\n  }\n};","map":{"version":3,"names":["props","imageUrl","type","String","required","initialSelectedAreas","Array","default","data","isSelecting","selectionStart","x","y","selectionEnd","selectedAreas","computed","selectionBoxStyle","width","Math","abs","height","left","min","top","border","position","pointerEvents","methods","onMouseDown","event","offsetX","offsetY","onMouseUp","area","x1","y1","x2","max","y2","push","sendAreasToBackend","onMouseMove","getAreaStyle","backgroundColor","$axios","post","areas","then","response","console","log","catch","error","watch","newValue","localStorage","setItem","JSON","stringify","created","savedAreas","getItem","parse"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div\n    class=\"image-container\"\n    @mousedown=\"onMouseDown\"\n    @mouseup=\"onMouseUp\"\n    @mousemove=\"onMouseMove\"\n  >\n    <img\n      src=\"http://192.168.2.39:9000/tyw-mes/2024/11/07/04d80114d19e093572086eadc93aaaa_1730944261519.jpg\"\n      alt=\"image\"\n      class=\"image\"\n    />\n    <div\n      v-for=\"(area, index) in selectedAreas\"\n      :key=\"index\"\n      class=\"selected-area\"\n      :style=\"getAreaStyle(area)\"\n    ></div>\n    <div\n      v-if=\"isSelecting\"\n      class=\"selection-box\"\n      :style=\"selectionBoxStyle\"\n    ></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageUrl: {\n      type: String,\n      required: true,\n    },\n    initialSelectedAreas: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      isSelecting: false,\n      selectionStart: { x: 0, y: 0 },\n      selectionEnd: { x: 0, y: 0 },\n      selectedAreas: this.initialSelectedAreas, // 通过 prop 传入初始选中区域\n    };\n  },\n  computed: {\n    selectionBoxStyle() {\n      const width = Math.abs(this.selectionEnd.x - this.selectionStart.x);\n      const height = Math.abs(this.selectionEnd.y - this.selectionStart.y);\n      const left = Math.min(this.selectionStart.x, this.selectionEnd.x);\n      const top = Math.min(this.selectionStart.y, this.selectionEnd.y);\n      return {\n        width: `${width}px`,\n        height: `${height}px`,\n        left: `${left}px`,\n        top: `${top}px`,\n        border: \"2px dashed rgba(0, 0, 255, 0.5)\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n      };\n    },\n  },\n  methods: {\n    onMouseDown(event) {\n      const { offsetX, offsetY } = event;\n      this.isSelecting = true;\n      this.selectionStart = { x: offsetX, y: offsetY };\n      this.selectionEnd = { x: offsetX, y: offsetY };\n    },\n    onMouseUp() {\n      if (this.isSelecting) {\n        this.isSelecting = false;\n        const area = {\n          x1: Math.min(this.selectionStart.x, this.selectionEnd.x),\n          y1: Math.min(this.selectionStart.y, this.selectionEnd.y),\n          x2: Math.max(this.selectionStart.x, this.selectionEnd.x),\n          y2: Math.max(this.selectionStart.y, this.selectionEnd.y),\n        };\n        this.selectedAreas.push(area);\n        this.sendAreasToBackend(); // 发送到后端\n      }\n    },\n    onMouseMove(event) {\n      if (this.isSelecting) {\n        this.selectionEnd = { x: event.offsetX, y: event.offsetY };\n      }\n    },\n    getAreaStyle(area) {\n      return {\n        position: \"absolute\",\n        left: `${area.x1}px`,\n        top: `${area.y1}px`,\n        width: `${area.x2 - area.x1}px`,\n        height: `${area.y2 - area.y1}px`,\n        backgroundColor: \"rgba(0, 0, 255, 0.3)\",\n        border: \"2px solid rgba(0, 0, 255, 0.5)\",\n        pointerEvents: \"none\",\n      };\n    },\n    sendAreasToBackend() {\n      // 将区域信息发送到后端\n      this.$axios\n        .post(\"/api/save-areas\", { areas: this.selectedAreas })\n        .then((response) => {\n          console.log(\"Areas saved successfully:\", response);\n        })\n        .catch((error) => {\n          console.error(\"Failed to save areas:\", error);\n        });\n    },\n  },\n  watch: {\n    selectedAreas(newValue) {\n      // 当 selectedAreas 更新时，将数据存储在本地，或者发送给后端\n      localStorage.setItem(\"selectedAreas\", JSON.stringify(newValue));\n    },\n  },\n  created() {\n    const savedAreas = localStorage.getItem(\"selectedAreas\");\n    if (savedAreas) {\n      this.selectedAreas = JSON.parse(savedAreas);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.image-container {\n  position: relative;\n  display: inline-block;\n}\n\n.image {\n  display: block;\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.selected-area {\n  position: absolute;\n  background-color: rgba(0, 0, 255, 0.3);\n  border: 2px solid rgba(0, 0, 255, 0.5);\n  pointer-events: none;\n}\n\n.selection-box {\n  position: absolute;\n  border: 2px dashed rgba(0, 0, 255, 0.5);\n  pointer-events: none;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}