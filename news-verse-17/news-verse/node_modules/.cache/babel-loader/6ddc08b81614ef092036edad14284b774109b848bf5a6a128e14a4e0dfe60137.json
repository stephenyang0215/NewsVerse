{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      timer: null,\n      offset: 0 // 与UTC的偏移时间（秒）\n    };\n  },\n  computed: {\n    formattedTime() {\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\n    }\n  },\n  methods: {\n    fetchTime() {\n      axios.get(\"https://worldtimeapi.org/api/timezone/America/New_York\").then(response => {\n        const utcOffset = new Date(response.data.utc_datetime).getTimezoneOffset() * 60;\n        this.offset = -response.data.utc_offset.slice(0, 3) * 3600; // 获取当前时区的偏移量\n        const localTime = new Date(new Date(response.data.datetime).getTime() + this.offset * 1000);\n        this.hours = localTime.getHours();\n        this.minutes = localTime.getMinutes();\n        this.seconds = localTime.getSeconds();\n      }).catch(error => {\n        console.error(\"Error fetching time:\", error);\n      });\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.seconds += 1;\n        if (this.seconds >= 60) {\n          this.seconds = 0;\n          this.minutes += 1;\n        }\n        if (this.minutes >= 60) {\n          this.minutes = 0;\n          this.hours += 1;\n        }\n      }, 1000);\n    }\n  },\n  mounted() {\n    this.fetchTime();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer); // 组件销毁时清除定时器\n  }\n};","map":{"version":3,"names":["axios","data","seconds","minutes","hours","timer","offset","computed","formattedTime","paddedMinutes","String","padStart","paddedSeconds","methods","fetchTime","get","then","response","utcOffset","Date","utc_datetime","getTimezoneOffset","utc_offset","slice","localTime","datetime","getTime","getHours","getMinutes","getSeconds","catch","error","console","startTimer","setInterval","mounted","beforeDestroy","clearInterval"],"sources":["src/components/BostonClock.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>波士顿当前时间</h2>\r\n    <p>{{ formattedTime }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      seconds: 0,\r\n      minutes: 0,\r\n      hours: 0,\r\n      timer: null,\r\n      offset: 0, // 与UTC的偏移时间（秒）\r\n    };\r\n  },\r\n  computed: {\r\n    formattedTime() {\r\n      const paddedMinutes = String(this.minutes).padStart(2, \"0\");\r\n      const paddedSeconds = String(this.seconds).padStart(2, \"0\");\r\n      return `${this.hours}:${paddedMinutes}:${paddedSeconds}`;\r\n    },\r\n  },\r\n  methods: {\r\n    fetchTime() {\r\n      axios\r\n        .get(\"https://worldtimeapi.org/api/timezone/America/New_York\")\r\n        .then((response) => {\r\n          const utcOffset =\r\n            new Date(response.data.utc_datetime).getTimezoneOffset() * 60;\r\n          this.offset = -response.data.utc_offset.slice(0, 3) * 3600; // 获取当前时区的偏移量\r\n          const localTime = new Date(\r\n            new Date(response.data.datetime).getTime() + this.offset * 1000\r\n          );\r\n          this.hours = localTime.getHours();\r\n          this.minutes = localTime.getMinutes();\r\n          this.seconds = localTime.getSeconds();\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching time:\", error);\r\n        });\r\n    },\r\n    startTimer() {\r\n      this.timer = setInterval(() => {\r\n        this.seconds += 1;\r\n\r\n        if (this.seconds >= 60) {\r\n          this.seconds = 0;\r\n          this.minutes += 1;\r\n        }\r\n\r\n        if (this.minutes >= 60) {\r\n          this.minutes = 0;\r\n          this.hours += 1;\r\n        }\r\n      }, 1000);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchTime();\r\n    this.startTimer();\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.timer); // 组件销毁时清除定时器\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nh2 {\r\n  margin: 0;\r\n}\r\n\r\np {\r\n  font-size: 24px;\r\n}\r\n</style>\r\n"],"mappings":"AAQA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,KAAA;MACAC,KAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,MAAAC,aAAA,GAAAC,MAAA,MAAAP,OAAA,EAAAQ,QAAA;MACA,MAAAC,aAAA,GAAAF,MAAA,MAAAR,OAAA,EAAAS,QAAA;MACA,eAAAP,KAAA,IAAAK,aAAA,IAAAG,aAAA;IACA;EACA;EACAC,OAAA;IACAC,UAAA;MACAd,KAAA,CACAe,GAAA,2DACAC,IAAA,CAAAC,QAAA;QACA,MAAAC,SAAA,GACA,IAAAC,IAAA,CAAAF,QAAA,CAAAhB,IAAA,CAAAmB,YAAA,EAAAC,iBAAA;QACA,KAAAf,MAAA,IAAAW,QAAA,CAAAhB,IAAA,CAAAqB,UAAA,CAAAC,KAAA;QACA,MAAAC,SAAA,OAAAL,IAAA,CACA,IAAAA,IAAA,CAAAF,QAAA,CAAAhB,IAAA,CAAAwB,QAAA,EAAAC,OAAA,UAAApB,MAAA,OACA;QACA,KAAAF,KAAA,GAAAoB,SAAA,CAAAG,QAAA;QACA,KAAAxB,OAAA,GAAAqB,SAAA,CAAAI,UAAA;QACA,KAAA1B,OAAA,GAAAsB,SAAA,CAAAK,UAAA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;MACA;IACA;IACAE,WAAA;MACA,KAAA5B,KAAA,GAAA6B,WAAA;QACA,KAAAhC,OAAA;QAEA,SAAAA,OAAA;UACA,KAAAA,OAAA;UACA,KAAAC,OAAA;QACA;QAEA,SAAAA,OAAA;UACA,KAAAA,OAAA;UACA,KAAAC,KAAA;QACA;MACA;IACA;EACA;EACA+B,QAAA;IACA,KAAArB,SAAA;IACA,KAAAmB,UAAA;EACA;EACAG,cAAA;IACAC,aAAA,MAAAhC,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}