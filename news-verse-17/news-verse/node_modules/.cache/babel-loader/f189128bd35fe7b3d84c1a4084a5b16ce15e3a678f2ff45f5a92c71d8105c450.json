{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [],\n      // 存储多个选区\n      isDrawing: false,\n      // 标记是否正在绘制选区\n      isDragging: false,\n      // 是否正在拖动选区\n      isResizing: false,\n      // 是否正在缩放选区\n      selectedAreaIndex: -1,\n      // 当前选中的选区索引\n      startX: 0,\n      startY: 0,\n      dragOffsetX: 0,\n      dragOffsetY: 0,\n      resizeHandleSize: 8,\n      // 缩放手柄的大小\n      ctx: null // 画布上下文\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\";\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    // 图片加载完毕后设置画布尺寸\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n    },\n    // 开始绘制选区或拖拽\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n      if (this.selectedAreaIndex !== -1 && this.isMouseInsideSelection(this.startX, this.startY, this.selectedAreaIndex)) {\n        // 如果点击在已有选区内，开始拖拽\n        this.isDragging = true;\n        // 计算拖动的偏移量\n        const selection = this.selection[this.selectedAreaIndex];\n        this.dragOffsetX = this.startX - selection.x;\n        this.dragOffsetY = this.startY - selection.y;\n      } else if (this.selectedAreaIndex === -1) {\n        // 如果没有选中任何选区，开始绘制新选区\n        this.isDrawing = true;\n      } else if (this.isMouseOnResizeHandle(this.startX, this.startY)) {\n        // 如果点击在选区的缩放手柄上，开始缩放\n        this.isResizing = true;\n      }\n    },\n    // 判断鼠标是否在选区内\n    isMouseInsideSelection(mouseX, mouseY, index) {\n      const selection = this.selection[index];\n      return mouseX >= selection.x && mouseX <= selection.x + selection.width && mouseY >= selection.y && mouseY <= selection.y + selection.height;\n    },\n    // 判断鼠标是否在选区的缩放手柄上\n    isMouseOnResizeHandle(mouseX, mouseY) {\n      if (this.selectedAreaIndex === -1) return false;\n      const selection = this.selection[this.selectedAreaIndex];\n      const handleX = selection.x + selection.width - this.resizeHandleSize;\n      const handleY = selection.y + selection.height - this.resizeHandleSize;\n      return mouseX >= handleX && mouseX <= handleX + this.resizeHandleSize && mouseY >= handleY && mouseY <= handleY + this.resizeHandleSize;\n    },\n    // 绘制选区\n    draw(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const width = endX - this.startX;\n        const height = endY - this.startY;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n        // 绘制当前选区\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      } else if (this.isDragging && this.selectedAreaIndex !== -1) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const moveX = e.clientX - rect.left - this.dragOffsetX;\n        const moveY = e.clientY - rect.top - this.dragOffsetY;\n        const selection = this.selection[this.selectedAreaIndex];\n        selection.x = moveX;\n        selection.y = moveY;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n        this.drawAllSelections(); // 绘制所有选区\n      } else if (this.isResizing && this.selectedAreaIndex !== -1) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const selection = this.selection[this.selectedAreaIndex];\n        selection.width = endX - selection.x;\n        selection.height = endY - selection.y;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n        this.drawAllSelections(); // 绘制所有选区\n      }\n    },\n    // 完成绘制选区或拖拽\n    endDrawing(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const width = endX - this.startX;\n        const height = endY - this.startY;\n        this.selection.push({\n          x: this.startX,\n          y: this.startY,\n          width,\n          height\n        });\n        this.selectedAreaIndex = this.selection.length - 1; // 选中最新创建的选区\n        this.isDrawing = false;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n        this.drawAllSelections(); // 绘制所有选区\n      } else if (this.isDragging || this.isResizing) {\n        this.isDragging = false;\n        this.isResizing = false;\n      }\n    },\n    // 绘制所有选区\n    drawAllSelections() {\n      this.selection.forEach(selection => {\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(selection.x, selection.y, selection.width, selection.height);\n\n        // 绘制缩放手柄\n        this.ctx.fillStyle = \"blue\";\n        this.ctx.fillRect(selection.x + selection.width - this.resizeHandleSize, selection.y + selection.height - this.resizeHandleSize, this.resizeHandleSize, this.resizeHandleSize);\n      });\n    },\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    // 获取已选择的区域信息\n    getSelectedAreas() {\n      return this.selection;\n    }\n  }\n};","map":{"version":3,"names":["data","canvasWidth","canvasHeight","image","Image","selection","isDrawing","isDragging","isResizing","selectedAreaIndex","startX","startY","dragOffsetX","dragOffsetY","resizeHandleSize","ctx","mounted","$refs","canvas","getContext","src","imageSrc","onload","onImageLoad","props","type","String","required","methods","width","height","drawImage","startDrawing","e","rect","getBoundingClientRect","clientX","left","clientY","top","isMouseInsideSelection","x","y","isMouseOnResizeHandle","mouseX","mouseY","index","handleX","handleY","draw","endX","endY","clearCanvas","strokeStyle","lineWidth","strokeRect","moveX","moveY","drawAllSelections","endDrawing","push","length","forEach","fillStyle","fillRect","clearRect","getSelectedAreas"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas\n      ref=\"canvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousedown=\"startDrawing\"\n      @mousemove=\"draw\"\n      @mouseup=\"endDrawing\"\n      @mouseleave=\"endDrawing\"\n    ></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [], // 存储多个选区\n      isDrawing: false, // 标记是否正在绘制选区\n      isDragging: false, // 是否正在拖动选区\n      isResizing: false, // 是否正在缩放选区\n      selectedAreaIndex: -1, // 当前选中的选区索引\n      startX: 0,\n      startY: 0,\n      dragOffsetX: 0,\n      dragOffsetY: 0,\n      resizeHandleSize: 8, // 缩放手柄的大小\n      ctx: null, // 画布上下文\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\";\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {\n    // 图片加载完毕后设置画布尺寸\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n    },\n\n    // 开始绘制选区或拖拽\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n\n      if (\n        this.selectedAreaIndex !== -1 &&\n        this.isMouseInsideSelection(\n          this.startX,\n          this.startY,\n          this.selectedAreaIndex\n        )\n      ) {\n        // 如果点击在已有选区内，开始拖拽\n        this.isDragging = true;\n        // 计算拖动的偏移量\n        const selection = this.selection[this.selectedAreaIndex];\n        this.dragOffsetX = this.startX - selection.x;\n        this.dragOffsetY = this.startY - selection.y;\n      } else if (this.selectedAreaIndex === -1) {\n        // 如果没有选中任何选区，开始绘制新选区\n        this.isDrawing = true;\n      } else if (this.isMouseOnResizeHandle(this.startX, this.startY)) {\n        // 如果点击在选区的缩放手柄上，开始缩放\n        this.isResizing = true;\n      }\n    },\n\n    // 判断鼠标是否在选区内\n    isMouseInsideSelection(mouseX, mouseY, index) {\n      const selection = this.selection[index];\n      return (\n        mouseX >= selection.x &&\n        mouseX <= selection.x + selection.width &&\n        mouseY >= selection.y &&\n        mouseY <= selection.y + selection.height\n      );\n    },\n\n    // 判断鼠标是否在选区的缩放手柄上\n    isMouseOnResizeHandle(mouseX, mouseY) {\n      if (this.selectedAreaIndex === -1) return false;\n      const selection = this.selection[this.selectedAreaIndex];\n      const handleX = selection.x + selection.width - this.resizeHandleSize;\n      const handleY = selection.y + selection.height - this.resizeHandleSize;\n      return (\n        mouseX >= handleX &&\n        mouseX <= handleX + this.resizeHandleSize &&\n        mouseY >= handleY &&\n        mouseY <= handleY + this.resizeHandleSize\n      );\n    },\n\n    // 绘制选区\n    draw(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const width = endX - this.startX;\n        const height = endY - this.startY;\n\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n        // 绘制当前选区\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      } else if (this.isDragging && this.selectedAreaIndex !== -1) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const moveX = e.clientX - rect.left - this.dragOffsetX;\n        const moveY = e.clientY - rect.top - this.dragOffsetY;\n\n        const selection = this.selection[this.selectedAreaIndex];\n        selection.x = moveX;\n        selection.y = moveY;\n\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n        this.drawAllSelections(); // 绘制所有选区\n      } else if (this.isResizing && this.selectedAreaIndex !== -1) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n\n        const selection = this.selection[this.selectedAreaIndex];\n        selection.width = endX - selection.x;\n        selection.height = endY - selection.y;\n\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n        this.drawAllSelections(); // 绘制所有选区\n      }\n    },\n\n    // 完成绘制选区或拖拽\n    endDrawing(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const width = endX - this.startX;\n        const height = endY - this.startY;\n\n        this.selection.push({ x: this.startX, y: this.startY, width, height });\n        this.selectedAreaIndex = this.selection.length - 1; // 选中最新创建的选区\n        this.isDrawing = false;\n\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n        this.drawAllSelections(); // 绘制所有选区\n      } else if (this.isDragging || this.isResizing) {\n        this.isDragging = false;\n        this.isResizing = false;\n      }\n    },\n\n    // 绘制所有选区\n    drawAllSelections() {\n      this.selection.forEach((selection) => {\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(\n          selection.x,\n          selection.y,\n          selection.width,\n          selection.height\n        );\n\n        // 绘制缩放手柄\n        this.ctx.fillStyle = \"blue\";\n        this.ctx.fillRect(\n          selection.x + selection.width - this.resizeHandleSize,\n          selection.y + selection.height - this.resizeHandleSize,\n          this.resizeHandleSize,\n          this.resizeHandleSize\n        );\n      });\n    },\n\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    // 获取已选择的区域信息\n    getSelectedAreas() {\n      return this.selection;\n    },\n  },\n};\n</script>\n\n<style scoped>\ncanvas {\n  border: 1px solid #000;\n  cursor: crosshair;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}