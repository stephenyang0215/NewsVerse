{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageSrc: String\n  },\n  data() {\n    return {\n      img: new Image(),\n      selection: {\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        children: []\n      },\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      ctx: null,\n      startX: 0,\n      startY: 0\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    }\n  },\n  methods: {\n    loadImage(src) {\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n\n      // 初始化选区\n      this.selection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5,\n        children: []\n      };\n      this.drawCanvas();\n    },\n    drawCanvas(w, y) {\n      // const canvas = this.$refs.canvas;\n      // this.ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (this.img) {\n        this.ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(this.ctx);\n\n      // 绘制当前选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.startX, this.startY, w, y);\n\n      // 绘制选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.selection.x, this.selection.y, this.selection.width, this.selection.height);\n      // 绘制所有已选区\n      if (this.selection.children.length > 0) {\n        this.selection.children.forEach(area => {\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n      }\n\n      // 绘制控制点\n      this.drawControlPoints(this.ctx);\n    },\n    // 绘制灰色遮罩层\n    drawOverlay(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.selection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.8)\"; // 半透明的灰色\n      ctx.fillRect(0, 0, ctx.canvas.width, y); // 选区上方\n      ctx.fillRect(0, y + height, ctx.canvas.width, ctx.canvas.height - (y + height)); // 选区下方\n      ctx.fillRect(0, y, x, height); // 选区左侧\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height); // 选区右侧\n    },\n    // 绘制控制点\n    drawControlPoints(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.selection;\n      const controlPoints = [{\n        x: x,\n        y: y\n      }, {\n        x: x + width,\n        y: y\n      }, {\n        x: x,\n        y: y + height\n      }, {\n        x: x + width,\n        y: y + height\n      }];\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach(point => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n    // 检查点击位置是否在遮罩层区域内\n    isInsideOverlay(x, y) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = this.selection;\n      // 检查点击是否在选区外的遮罩区域内\n      return x < selX || x > selX + width || y < selY || y > selY + height;\n    },\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = event.clientX - canvasRect.left;\n      this.startY = event.clientY - canvasRect.top;\n\n      // 检查点击是否在遮罩层外\n      if (this.isInsideOverlay(this.startX, this.startY)) {\n        return; // 如果点击在遮罩层区域内，不允许拖动或改变选区\n      }\n\n      // 检查是否点击了控制点\n      const clickedCorner = this.getClickedCorner(this.startX, this.startY);\n      if (clickedCorner !== null) {\n        this.isResizing = true;\n        this.resizeCorner = clickedCorner;\n      }\n      console.log(\"clickedCorner\", clickedCorner);\n    },\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // // 仅在选区区域内进行拖动或缩放\n      // if (this.isInsideOverlay(x, y)) return;\n\n      if (this.resizeCorner !== -1) {\n        // 仅更新缩放\n        this.resizeSelection(x, y);\n        this.drawCanvas();\n      } else {\n        const width = x - this.startX;\n        const height = y - this.startY;\n        this.drawCanvas(width, height);\n      }\n    },\n    onMouseUp(e) {\n      if (this.resizeCorner !== -1) {\n        this.isResizing = false;\n        this.resizeCorner = null;\n      } else {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        this.isResizing = false;\n        this.resizeCorner = null;\n        console.log(this.selection.children);\n        this.selection.children.push({\n          x: this.startX,\n          y: this.startY,\n          width: endX - this.startX,\n          height: endY - this.startY\n        });\n      }\n\n      // // 绘制所有已选区\n      // this.selection.children.forEach((area) => {\n      //   this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      // });\n\n      // this.ctx.strokeRect(\n      //   this.selection.x,\n      //   this.selection.y,\n      //   this.selection.width,\n      //   this.selection.height\n      // );\n    },\n    getClickedCorner(x, y) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = this.selection;\n      const corners = [{\n        x: selX,\n        y: selY\n      }, {\n        x: selX + width,\n        y: selY\n      }, {\n        x: selX,\n        y: selY + height\n      }, {\n        x: selX + width,\n        y: selY + height\n      }];\n      return corners.findIndex(corner => Math.abs(corner.x - x) < this.controlSize && Math.abs(corner.y - y) < this.controlSize);\n    },\n    resizeSelection(x, y) {\n      const {\n        x: selX,\n        y: selY\n      } = this.selection;\n      switch (this.resizeCorner) {\n        case 0:\n          // 左上角\n          this.selection.width += this.selection.x - x;\n          this.selection.height += this.selection.y - y;\n          this.selection.x = x;\n          this.selection.y = y;\n          break;\n        case 1:\n          // 右上角\n          this.selection.width = x - selX;\n          this.selection.height += selY - y;\n          this.selection.y = y;\n          break;\n        case 2:\n          // 左下角\n          this.selection.width += selX - x;\n          this.selection.height = y - selY;\n          this.selection.x = x;\n          break;\n        case 3:\n          // 右下角\n          this.selection.width = x - selX;\n          this.selection.height = y - selY;\n          break;\n      }\n\n      // 限制最小尺寸\n      this.selection.width = Math.max(20, this.selection.width);\n      this.selection.height = Math.max(20, this.selection.height);\n    },\n    sendSelection() {\n      // const selectionData = {\n      //   x: this.selection.x,\n      //   y: this.selection.y,\n      //   width: this.selection.width,\n      //   height: this.selection.height,\n      // };\n      // this.$emit(\"sendSelection\", selectionData);\n      console.log(this.selection);\n    },\n    undoSelection() {\n      if (this.selection.children.length > 0) {\n        this.selection.children = this.selection.children.slice(0, -1);\n        this.drawCanvas(); // Redraw the canvas\n        console.log(this.selection);\n      }\n    }\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","String","data","img","Image","selection","x","y","width","height","children","isResizing","resizeCorner","controlSize","ctx","startX","startY","watch","newSrc","loadImage","methods","src","onload","setCanvasAndSelection","canvas","$refs","drawCanvas","w","drawImage","drawOverlay","strokeStyle","lineWidth","strokeRect","length","forEach","area","drawControlPoints","fillStyle","fillRect","controlPoints","point","beginPath","arc","Math","PI","fill","isInsideOverlay","selX","selY","onMouseDown","event","canvasRect","getBoundingClientRect","clientX","left","clientY","top","clickedCorner","getClickedCorner","console","log","clearCanvas","clearRect","canvasWidth","canvasHeight","onMouseMove","resizeSelection","onMouseUp","e","rect","endX","endY","push","corners","findIndex","corner","abs","max","sendSelection","undoSelection","slice","mounted","getContext"],"sources":["src/components/CanvasTest.vue"],"sourcesContent":["<template>\n  <div class=\"image-cropper\">\n    <canvas\n      ref=\"canvas\"\n      @mousedown=\"onMouseDown\"\n      @mouseup=\"onMouseUp\"\n      @mousemove=\"onMouseMove\"\n    ></canvas>\n    <button @click=\"sendSelection\">发送选中范围</button>\n    <button @click=\"undoSelection\">撤销上一步选区</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: String,\n  },\n  data() {\n    return {\n      img: new Image(),\n      selection: { x: 50, y: 50, width: 100, height: 100, children: [] },\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      ctx: null,\n      startX: 0,\n      startY: 0,\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    },\n  },\n  methods: {\n    loadImage(src) {\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n\n      // 初始化选区\n      this.selection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5,\n        children: [],\n      };\n\n      this.drawCanvas();\n    },\n\n    drawCanvas(w, y) {\n      // const canvas = this.$refs.canvas;\n      // this.ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (this.img) {\n        this.ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(this.ctx);\n\n      // 绘制当前选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.startX, this.startY, w, y);\n\n      // 绘制选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(\n        this.selection.x,\n        this.selection.y,\n        this.selection.width,\n        this.selection.height\n      );\n      // 绘制所有已选区\n      if (this.selection.children.length > 0) {\n        this.selection.children.forEach((area) => {\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n      }\n\n      // 绘制控制点\n      this.drawControlPoints(this.ctx);\n    },\n\n    // 绘制灰色遮罩层\n    drawOverlay(ctx) {\n      const { x, y, width, height } = this.selection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.8)\"; // 半透明的灰色\n      ctx.fillRect(0, 0, ctx.canvas.width, y); // 选区上方\n      ctx.fillRect(\n        0,\n        y + height,\n        ctx.canvas.width,\n        ctx.canvas.height - (y + height)\n      ); // 选区下方\n      ctx.fillRect(0, y, x, height); // 选区左侧\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height); // 选区右侧\n    },\n    // 绘制控制点\n    drawControlPoints(ctx) {\n      const { x, y, width, height } = this.selection;\n      const controlPoints = [\n        { x: x, y: y },\n        { x: x + width, y: y },\n        { x: x, y: y + height },\n        { x: x + width, y: y + height },\n      ];\n\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach((point) => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n\n    // 检查点击位置是否在遮罩层区域内\n    isInsideOverlay(x, y) {\n      const { x: selX, y: selY, width, height } = this.selection;\n      // 检查点击是否在选区外的遮罩区域内\n      return x < selX || x > selX + width || y < selY || y > selY + height;\n    },\n\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = event.clientX - canvasRect.left;\n      this.startY = event.clientY - canvasRect.top;\n\n      // 检查点击是否在遮罩层外\n      if (this.isInsideOverlay(this.startX, this.startY)) {\n        return; // 如果点击在遮罩层区域内，不允许拖动或改变选区\n      }\n\n      // 检查是否点击了控制点\n      const clickedCorner = this.getClickedCorner(this.startX, this.startY);\n      if (clickedCorner !== null) {\n        this.isResizing = true;\n        this.resizeCorner = clickedCorner;\n      }\n      console.log(\"clickedCorner\", clickedCorner);\n    },\n\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n\n      // // 仅在选区区域内进行拖动或缩放\n      // if (this.isInsideOverlay(x, y)) return;\n\n      if (this.resizeCorner !== -1) {\n        // 仅更新缩放\n        this.resizeSelection(x, y);\n        this.drawCanvas();\n      } else {\n        const width = x - this.startX;\n        const height = y - this.startY;\n        this.drawCanvas(width, height);\n      }\n    },\n\n    onMouseUp(e) {\n      if (this.resizeCorner !== -1) {\n        this.isResizing = false;\n        this.resizeCorner = null;\n      } else {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        this.isResizing = false;\n        this.resizeCorner = null;\n        console.log(this.selection.children);\n\n        this.selection.children.push({\n          x: this.startX,\n          y: this.startY,\n          width: endX - this.startX,\n          height: endY - this.startY,\n        });\n      }\n\n      // // 绘制所有已选区\n      // this.selection.children.forEach((area) => {\n      //   this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      // });\n\n      // this.ctx.strokeRect(\n      //   this.selection.x,\n      //   this.selection.y,\n      //   this.selection.width,\n      //   this.selection.height\n      // );\n    },\n\n    getClickedCorner(x, y) {\n      const { x: selX, y: selY, width, height } = this.selection;\n      const corners = [\n        { x: selX, y: selY },\n        { x: selX + width, y: selY },\n        { x: selX, y: selY + height },\n        { x: selX + width, y: selY + height },\n      ];\n\n      return corners.findIndex(\n        (corner) =>\n          Math.abs(corner.x - x) < this.controlSize &&\n          Math.abs(corner.y - y) < this.controlSize\n      );\n    },\n\n    resizeSelection(x, y) {\n      const { x: selX, y: selY } = this.selection;\n      switch (this.resizeCorner) {\n        case 0: // 左上角\n          this.selection.width += this.selection.x - x;\n          this.selection.height += this.selection.y - y;\n          this.selection.x = x;\n          this.selection.y = y;\n          break;\n        case 1: // 右上角\n          this.selection.width = x - selX;\n          this.selection.height += selY - y;\n          this.selection.y = y;\n          break;\n        case 2: // 左下角\n          this.selection.width += selX - x;\n          this.selection.height = y - selY;\n          this.selection.x = x;\n          break;\n        case 3: // 右下角\n          this.selection.width = x - selX;\n          this.selection.height = y - selY;\n          break;\n      }\n\n      // 限制最小尺寸\n      this.selection.width = Math.max(20, this.selection.width);\n      this.selection.height = Math.max(20, this.selection.height);\n    },\n\n    sendSelection() {\n      // const selectionData = {\n      //   x: this.selection.x,\n      //   y: this.selection.y,\n      //   width: this.selection.width,\n      //   height: this.selection.height,\n      // };\n      // this.$emit(\"sendSelection\", selectionData);\n      console.log(this.selection);\n    },\n    undoSelection() {\n      if (this.selection.children.length > 0) {\n        this.selection.children = this.selection.children.slice(0, -1);\n        this.drawCanvas(); // Redraw the canvas\n        console.log(this.selection);\n      }\n    },\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.image-cropper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\ncanvas {\n  border: 1px solid #000;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}