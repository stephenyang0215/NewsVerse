{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageSrc: String\n  },\n  data() {\n    return {\n      img: null,\n      selection: {\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        children: []\n      },\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      ctx: null,\n      startX: 0,\n      startY: 0\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    }\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n\n      // 初始化选区\n      this.selection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5\n      };\n      this.drawCanvas();\n    },\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      this.ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        this.ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(this.ctx);\n\n      // 绘制选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.selection.x, this.selection.y, this.selection.width, this.selection.height);\n\n      // 绘制控制点\n      this.drawControlPoints(this.ctx);\n    },\n    // 绘制灰色遮罩层\n    drawOverlay(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.selection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; // 半透明的灰色\n      ctx.fillRect(0, 0, ctx.canvas.width, y); // 选区上方\n      ctx.fillRect(0, y + height, ctx.canvas.width, ctx.canvas.height - (y + height)); // 选区下方\n      ctx.fillRect(0, y, x, height); // 选区左侧\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height); // 选区右侧\n    },\n    drawControlPoints(ctx) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.selection;\n      const controlPoints = [{\n        x: x,\n        y: y\n      }, {\n        x: x + width,\n        y: y\n      }, {\n        x: x,\n        y: y + height\n      }, {\n        x: x + width,\n        y: y + height\n      }];\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach(point => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      this.isResizing = true;\n\n      // 检查是否点击了控制点\n      const clickedCorner = this.getClickedCorner(x, y);\n      if (clickedCorner !== null) {\n        this.resizeCorner = clickedCorner;\n      }\n    },\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n      this.clearCanvas();\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      const width = x - this.startX;\n      const height = y - this.startY;\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制当前选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.startX, this.startY, width, height);\n\n      // 仅更新缩放\n      this.resizeSelection(x, y);\n      this.drawCanvas();\n    },\n    onMouseUp(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      this.selection.children.push({\n        x: this.startX,\n        y: this.startY,\n        width: endX - this.startX,\n        height: endY - this.startY\n      });\n      this.isResizing = false;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n      // 绘制所有已选区\n      this.selection.children.forEach(area => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n      this.resizeCorner = null;\n    },\n    getClickedCorner(x, y) {\n      const {\n        x: selX,\n        y: selY,\n        width,\n        height\n      } = this.selection;\n      const corners = [{\n        x: selX,\n        y: selY\n      }, {\n        x: selX + width,\n        y: selY\n      }, {\n        x: selX,\n        y: selY + height\n      }, {\n        x: selX + width,\n        y: selY + height\n      }];\n      return corners.findIndex(corner => Math.abs(corner.x - x) < this.controlSize && Math.abs(corner.y - y) < this.controlSize);\n    },\n    resizeSelection(x, y) {\n      const {\n        x: selX,\n        y: selY\n      } = this.selection;\n      switch (this.resizeCorner) {\n        case 0:\n          // 左上角\n          this.selection.width += this.selection.x - x;\n          this.selection.height += this.selection.y - y;\n          this.selection.x = x;\n          this.selection.y = y;\n          break;\n        case 1:\n          // 右上角\n          this.selection.width = x - selX;\n          this.selection.height += selY - y;\n          this.selection.y = y;\n          break;\n        case 2:\n          // 左下角\n          this.selection.width += selX - x;\n          this.selection.height = y - selY;\n          this.selection.x = x;\n          break;\n        case 3:\n          // 右下角\n          this.selection.width = x - selX;\n          this.selection.height = y - selY;\n          break;\n      }\n\n      // 限制最小尺寸\n      this.selection.width = Math.max(20, this.selection.width);\n      this.selection.height = Math.max(20, this.selection.height);\n    },\n    sendSelection() {\n      const selectionData = {\n        x: this.selection.x,\n        y: this.selection.y,\n        width: this.selection.width,\n        height: this.selection.height\n      };\n      this.$emit(\"sendSelection\", selectionData);\n    }\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","String","data","img","selection","x","y","width","height","children","isResizing","resizeCorner","controlSize","ctx","startX","startY","watch","newSrc","loadImage","methods","src","Image","onload","setCanvasAndSelection","canvas","$refs","drawCanvas","clearRect","drawImage","drawOverlay","strokeStyle","lineWidth","strokeRect","drawControlPoints","fillStyle","fillRect","controlPoints","forEach","point","beginPath","arc","Math","PI","fill","onMouseDown","event","canvasRect","getBoundingClientRect","clientX","left","clientY","top","clickedCorner","getClickedCorner","clearCanvas","canvasWidth","canvasHeight","onMouseMove","image","resizeSelection","onMouseUp","e","rect","endX","endY","push","area","selX","selY","corners","findIndex","corner","abs","max","sendSelection","selectionData","$emit","mounted","getContext"],"sources":["src/components/CanvasTest.vue"],"sourcesContent":["<template>\n  <div class=\"image-cropper\">\n    <canvas\n      ref=\"canvas\"\n      @mousedown=\"onMouseDown\"\n      @mouseup=\"onMouseUp\"\n      @mousemove=\"onMouseMove\"\n    ></canvas>\n    <button @click=\"sendSelection\">发送选中范围</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: String,\n  },\n  data() {\n    return {\n      img: null,\n      selection: { x: 50, y: 50, width: 100, height: 100, children: [] },\n      isResizing: false,\n      resizeCorner: null,\n      controlSize: 8,\n      ctx: null,\n      startX: 0,\n      startY: 0,\n    };\n  },\n  watch: {\n    imageSrc(newSrc) {\n      if (newSrc) {\n        this.loadImage(newSrc);\n      }\n    },\n  },\n  methods: {\n    loadImage(src) {\n      this.img = new Image();\n      this.img.onload = this.setCanvasAndSelection;\n      this.img.src = src;\n    },\n\n    setCanvasAndSelection() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.img.width;\n      canvas.height = this.img.height;\n\n      // 初始化选区\n      this.selection = {\n        x: this.img.width * 0.25,\n        y: this.img.height * 0.25,\n        width: this.img.width * 0.5,\n        height: this.img.height * 0.5,\n      };\n\n      this.drawCanvas();\n    },\n\n    drawCanvas() {\n      const canvas = this.$refs.canvas;\n      this.ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (this.img) {\n        this.ctx.drawImage(this.img, 0, 0);\n      }\n\n      // 绘制灰色遮罩层\n      this.drawOverlay(this.ctx);\n\n      // 绘制选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(\n        this.selection.x,\n        this.selection.y,\n        this.selection.width,\n        this.selection.height\n      );\n\n      // 绘制控制点\n      this.drawControlPoints(this.ctx);\n    },\n\n    // 绘制灰色遮罩层\n    drawOverlay(ctx) {\n      const { x, y, width, height } = this.selection;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; // 半透明的灰色\n      ctx.fillRect(0, 0, ctx.canvas.width, y); // 选区上方\n      ctx.fillRect(\n        0,\n        y + height,\n        ctx.canvas.width,\n        ctx.canvas.height - (y + height)\n      ); // 选区下方\n      ctx.fillRect(0, y, x, height); // 选区左侧\n      ctx.fillRect(x + width, y, ctx.canvas.width - (x + width), height); // 选区右侧\n    },\n\n    drawControlPoints(ctx) {\n      const { x, y, width, height } = this.selection;\n      const controlPoints = [\n        { x: x, y: y },\n        { x: x + width, y: y },\n        { x: x, y: y + height },\n        { x: x + width, y: y + height },\n      ];\n\n      ctx.fillStyle = \"blue\";\n      controlPoints.forEach((point) => {\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, this.controlSize / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    },\n\n    onMouseDown(event) {\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      this.isResizing = true;\n\n      // 检查是否点击了控制点\n      const clickedCorner = this.getClickedCorner(x, y);\n      if (clickedCorner !== null) {\n        this.resizeCorner = clickedCorner;\n      }\n    },\n\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    onMouseMove(event) {\n      if (!this.isResizing) return;\n      this.clearCanvas();\n\n      const canvasRect = this.$refs.canvas.getBoundingClientRect();\n      const x = event.clientX - canvasRect.left;\n      const y = event.clientY - canvasRect.top;\n      const width = x - this.startX;\n      const height = y - this.startY;\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制当前选区\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(this.startX, this.startY, width, height);\n\n      // 仅更新缩放\n      this.resizeSelection(x, y);\n      this.drawCanvas();\n    },\n\n    onMouseUp(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      this.selection.children.push({\n        x: this.startX,\n        y: this.startY,\n        width: endX - this.startX,\n        height: endY - this.startY,\n      });\n      this.isResizing = false;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n      // 绘制所有已选区\n      this.selection.children.forEach((area) => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n\n      this.resizeCorner = null;\n    },\n\n    getClickedCorner(x, y) {\n      const { x: selX, y: selY, width, height } = this.selection;\n      const corners = [\n        { x: selX, y: selY },\n        { x: selX + width, y: selY },\n        { x: selX, y: selY + height },\n        { x: selX + width, y: selY + height },\n      ];\n\n      return corners.findIndex(\n        (corner) =>\n          Math.abs(corner.x - x) < this.controlSize &&\n          Math.abs(corner.y - y) < this.controlSize\n      );\n    },\n\n    resizeSelection(x, y) {\n      const { x: selX, y: selY } = this.selection;\n      switch (this.resizeCorner) {\n        case 0: // 左上角\n          this.selection.width += this.selection.x - x;\n          this.selection.height += this.selection.y - y;\n          this.selection.x = x;\n          this.selection.y = y;\n          break;\n        case 1: // 右上角\n          this.selection.width = x - selX;\n          this.selection.height += selY - y;\n          this.selection.y = y;\n          break;\n        case 2: // 左下角\n          this.selection.width += selX - x;\n          this.selection.height = y - selY;\n          this.selection.x = x;\n          break;\n        case 3: // 右下角\n          this.selection.width = x - selX;\n          this.selection.height = y - selY;\n          break;\n      }\n\n      // 限制最小尺寸\n      this.selection.width = Math.max(20, this.selection.width);\n      this.selection.height = Math.max(20, this.selection.height);\n    },\n\n    sendSelection() {\n      const selectionData = {\n        x: this.selection.x,\n        y: this.selection.y,\n        width: this.selection.width,\n        height: this.selection.height,\n      };\n      this.$emit(\"sendSelection\", selectionData);\n    },\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    if (this.imageSrc) {\n      this.loadImage(this.imageSrc);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.image-cropper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\ncanvas {\n  border: 1px solid #000;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}