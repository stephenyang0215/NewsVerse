{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      activeMode: null,\n      // 当前激活的模式: 'selectArea' 或 'markArea'\n      selectArea: null,\n      // 选择的区域\n      markedAreas: [],\n      // 标记区域\n      isDragging: false,\n      dragIndex: null,\n      // 当前拖动的区域索引\n      canvasContext: null,\n      image: null,\n      // 图片对象\n      canvasWidth: 0,\n      // 画布宽度\n      canvasHeight: 0,\n      // 画布高度\n      scaleFactor: 1,\n      // 缩放比例\n      offsetX: 0,\n      // 画布偏移量\n      offsetY: 0,\n      // 画布偏移量\n      startX: 0,\n      // 起始点坐标\n      startY: 0 // 起始点坐标\n    };\n  },\n  mounted() {\n    const canvas = this.$refs.canvas;\n    this.canvasContext = canvas.getContext(\"2d\");\n\n    // 加载图片\n    this.image = new Image();\n    this.image.src = this.imageSrc;\n    this.image.onload = () => {\n      this.canvasWidth = this.image.width; // 设置画布宽度为图片宽度\n      this.canvasHeight = this.image.height; // 设置画布高度为图片高度\n      this.drawImage(); // 图片加载完成后绘制到 canvas 上\n    };\n  },\n  methods: {\n    drawImage() {\n      const ctx = this.canvasContext;\n      const canvas = this.$refs.canvas;\n\n      // 清空画布\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 绘制图片\n      ctx.drawImage(this.image, this.offsetX, this.offsetY, this.image.width * this.scaleFactor, this.image.height * this.scaleFactor);\n\n      // 绘制选择区域的遮罩\n      if (this.selectArea) {\n        ctx.save();\n        ctx.globalAlpha = 0.5; // 设置透明度\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; // 半透明黑色遮罩\n        ctx.fillRect(0, 0, canvas.width, canvas.height); // 遮罩整个画布\n        // 清除选择区域内部的遮罩，使其保持透明\n        ctx.clearRect(this.selectArea.x, this.selectArea.y, this.selectArea.width, this.selectArea.height);\n        ctx.restore();\n\n        // 绘制选择区域的边框\n        ctx.strokeStyle = \"blue\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(this.selectArea.x, this.selectArea.y, this.selectArea.width, this.selectArea.height);\n      }\n\n      // 绘制标记区域\n      for (const mark of this.markedAreas) {\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(mark.x, mark.y, mark.width, mark.height);\n      }\n    },\n    onMouseDown(e) {\n      if (this.activeMode === \"selectArea\") {\n        this.startX = e.offsetX;\n        this.startY = e.offsetY;\n        this.isDragging = true;\n        this.selectArea = {\n          x: this.startX,\n          y: this.startY,\n          width: 0,\n          height: 0\n        };\n      } else if (this.activeMode === \"markArea\") {\n        for (const [index, mark] of this.markedAreas.entries()) {\n          if (this.isInsideArea(e.offsetX, e.offsetY, mark)) {\n            this.isDragging = true;\n            this.dragIndex = index;\n            return;\n          }\n        }\n      }\n    },\n    onMouseMove(e) {\n      if (this.isDragging) {\n        if (this.activeMode === \"selectArea\" && this.selectArea) {\n          const width = e.offsetX - this.startX;\n          const height = e.offsetY - this.startY;\n          this.selectArea.width = width;\n          this.selectArea.height = height;\n        } else if (this.activeMode === \"markArea\" && this.dragIndex !== null) {\n          const mark = this.markedAreas[this.dragIndex];\n          mark.x = e.offsetX - mark.width / 2;\n          mark.y = e.offsetY - mark.height / 2;\n        }\n        this.drawImage();\n      }\n    },\n    onMouseUp() {\n      if (this.isDragging) {\n        if (this.activeMode === \"selectArea\" && this.selectArea) {\n          // 完成选择区域\n          this.selectArea.width = Math.abs(this.selectArea.width);\n          this.selectArea.height = Math.abs(this.selectArea.height);\n        } else if (this.activeMode === \"markArea\" && this.selectArea) {\n          // 将选择区域作为标记区域\n          if (!this.isOverlapping(this.selectArea)) {\n            this.markedAreas.push({\n              ...this.selectArea\n            });\n          }\n        }\n        this.isDragging = false;\n        this.drawImage();\n      }\n    },\n    isInsideArea(x, y, area) {\n      return x >= area.x && x <= area.x + area.width && y >= area.y && y <= area.y + area.height;\n    },\n    isOverlapping(area) {\n      for (const mark of this.markedAreas) {\n        if (area.x < mark.x + mark.width && area.x + area.width > mark.x && area.y < mark.y + mark.height && area.y + area.height > mark.y) {\n          return true; // 有重叠\n        }\n      }\n      return false; // 没有重叠\n    },\n    saveData() {\n      const data = {\n        selectArea: this.selectArea,\n        marks: this.markedAreas\n      };\n      console.log(\"Saved data:\", data);\n      // 在这里发送数据到后端，使用 API 保存\n      // axios.post('/api/save', data);\n    }\n  }\n};","map":{"version":3,"names":["props","imageSrc","type","String","required","data","activeMode","selectArea","markedAreas","isDragging","dragIndex","canvasContext","image","canvasWidth","canvasHeight","scaleFactor","offsetX","offsetY","startX","startY","mounted","canvas","$refs","getContext","Image","src","onload","width","height","drawImage","methods","ctx","clearRect","save","globalAlpha","fillStyle","fillRect","x","y","restore","strokeStyle","lineWidth","strokeRect","mark","onMouseDown","e","index","entries","isInsideArea","onMouseMove","onMouseUp","Math","abs","isOverlapping","push","area","saveData","marks","console","log"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div class=\"canvas-container\">\n    <canvas\n      ref=\"canvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousedown=\"onMouseDown\"\n      @mousemove=\"onMouseMove\"\n      @mouseup=\"onMouseUp\"\n    ></canvas>\n\n    <!-- 控制开关 -->\n    <div class=\"controls\">\n      <label>\n        <input type=\"radio\" v-model=\"activeMode\" value=\"selectArea\" />\n        选择可操作区域\n      </label>\n      <label>\n        <input type=\"radio\" v-model=\"activeMode\" value=\"markArea\" />\n        选择标记区域\n      </label>\n      <button @click=\"saveData\">保存</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      activeMode: null, // 当前激活的模式: 'selectArea' 或 'markArea'\n      selectArea: null, // 选择的区域\n      markedAreas: [], // 标记区域\n      isDragging: false,\n      dragIndex: null, // 当前拖动的区域索引\n      canvasContext: null,\n      image: null, // 图片对象\n      canvasWidth: 0, // 画布宽度\n      canvasHeight: 0, // 画布高度\n      scaleFactor: 1, // 缩放比例\n      offsetX: 0, // 画布偏移量\n      offsetY: 0, // 画布偏移量\n      startX: 0, // 起始点坐标\n      startY: 0, // 起始点坐标\n    };\n  },\n  mounted() {\n    const canvas = this.$refs.canvas;\n    this.canvasContext = canvas.getContext(\"2d\");\n\n    // 加载图片\n    this.image = new Image();\n    this.image.src = this.imageSrc;\n    this.image.onload = () => {\n      this.canvasWidth = this.image.width; // 设置画布宽度为图片宽度\n      this.canvasHeight = this.image.height; // 设置画布高度为图片高度\n      this.drawImage(); // 图片加载完成后绘制到 canvas 上\n    };\n  },\n  methods: {\n    drawImage() {\n      const ctx = this.canvasContext;\n      const canvas = this.$refs.canvas;\n\n      // 清空画布\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 绘制图片\n      ctx.drawImage(\n        this.image,\n        this.offsetX,\n        this.offsetY,\n        this.image.width * this.scaleFactor,\n        this.image.height * this.scaleFactor\n      );\n\n      // 绘制选择区域的遮罩\n      if (this.selectArea) {\n        ctx.save();\n        ctx.globalAlpha = 0.5; // 设置透明度\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; // 半透明黑色遮罩\n        ctx.fillRect(0, 0, canvas.width, canvas.height); // 遮罩整个画布\n        // 清除选择区域内部的遮罩，使其保持透明\n        ctx.clearRect(\n          this.selectArea.x,\n          this.selectArea.y,\n          this.selectArea.width,\n          this.selectArea.height\n        );\n        ctx.restore();\n\n        // 绘制选择区域的边框\n        ctx.strokeStyle = \"blue\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(\n          this.selectArea.x,\n          this.selectArea.y,\n          this.selectArea.width,\n          this.selectArea.height\n        );\n      }\n\n      // 绘制标记区域\n      for (const mark of this.markedAreas) {\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(mark.x, mark.y, mark.width, mark.height);\n      }\n    },\n    onMouseDown(e) {\n      if (this.activeMode === \"selectArea\") {\n        this.startX = e.offsetX;\n        this.startY = e.offsetY;\n        this.isDragging = true;\n        this.selectArea = {\n          x: this.startX,\n          y: this.startY,\n          width: 0,\n          height: 0,\n        };\n      } else if (this.activeMode === \"markArea\") {\n        for (const [index, mark] of this.markedAreas.entries()) {\n          if (this.isInsideArea(e.offsetX, e.offsetY, mark)) {\n            this.isDragging = true;\n            this.dragIndex = index;\n            return;\n          }\n        }\n      }\n    },\n    onMouseMove(e) {\n      if (this.isDragging) {\n        if (this.activeMode === \"selectArea\" && this.selectArea) {\n          const width = e.offsetX - this.startX;\n          const height = e.offsetY - this.startY;\n          this.selectArea.width = width;\n          this.selectArea.height = height;\n        } else if (this.activeMode === \"markArea\" && this.dragIndex !== null) {\n          const mark = this.markedAreas[this.dragIndex];\n          mark.x = e.offsetX - mark.width / 2;\n          mark.y = e.offsetY - mark.height / 2;\n        }\n        this.drawImage();\n      }\n    },\n    onMouseUp() {\n      if (this.isDragging) {\n        if (this.activeMode === \"selectArea\" && this.selectArea) {\n          // 完成选择区域\n          this.selectArea.width = Math.abs(this.selectArea.width);\n          this.selectArea.height = Math.abs(this.selectArea.height);\n        } else if (this.activeMode === \"markArea\" && this.selectArea) {\n          // 将选择区域作为标记区域\n          if (!this.isOverlapping(this.selectArea)) {\n            this.markedAreas.push({ ...this.selectArea });\n          }\n        }\n        this.isDragging = false;\n        this.drawImage();\n      }\n    },\n    isInsideArea(x, y, area) {\n      return (\n        x >= area.x &&\n        x <= area.x + area.width &&\n        y >= area.y &&\n        y <= area.y + area.height\n      );\n    },\n    isOverlapping(area) {\n      for (const mark of this.markedAreas) {\n        if (\n          area.x < mark.x + mark.width &&\n          area.x + area.width > mark.x &&\n          area.y < mark.y + mark.height &&\n          area.y + area.height > mark.y\n        ) {\n          return true; // 有重叠\n        }\n      }\n      return false; // 没有重叠\n    },\n    saveData() {\n      const data = {\n        selectArea: this.selectArea,\n        marks: this.markedAreas,\n      };\n      console.log(\"Saved data:\", data);\n      // 在这里发送数据到后端，使用 API 保存\n      // axios.post('/api/save', data);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.canvas-container {\n  position: relative;\n}\n\ncanvas {\n  border: 1px solid #ccc;\n}\n\n.controls {\n  margin-top: 10px;\n}\n\nbutton {\n  margin-left: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}