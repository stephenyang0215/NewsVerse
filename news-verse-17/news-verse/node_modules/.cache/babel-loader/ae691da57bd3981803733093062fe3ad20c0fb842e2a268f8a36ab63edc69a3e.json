{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      // 图片和画布的大小\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [],\n      // 存储选区数据\n      isDrawing: false,\n      // 标记是否正在绘制\n      isDragging: false,\n      // 标记是否正在拖拽\n      isResizing: false,\n      // 标记是否正在缩放\n      startX: 0,\n      startY: 0,\n      currentSelection: null,\n      // 当前操作的选区\n      ctx: null // 画布上下文\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\"; // 可以通过props传入图片路径\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    // 图片加载完毕后设置画布尺寸\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n    },\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n\n      // 如果没有选区，则允许开始选区\n      if (this.selection.length === 0) {\n        this.isDrawing = true;\n      } else {\n        // 如果有选区，检查是否点击在选区内\n        this.selection.forEach(area => {\n          if (this.startX >= area.x && this.startX <= area.x + area.width && this.startY >= area.y && this.startY <= area.y + area.height) {\n            this.isDragging = true;\n            this.currentSelection = area;\n          }\n        });\n      }\n    },\n    // 绘制选区\n    draw(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const width = endX - this.startX;\n        const height = endY - this.startY;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n        // 绘制当前选区\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      } else if (this.isDragging && this.currentSelection) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const deltaX = endX - this.startX;\n        const deltaY = endY - this.startY;\n\n        // 更新选区的位置\n        this.currentSelection.x += deltaX;\n        this.currentSelection.y += deltaY;\n        this.startX = endX;\n        this.startY = endY;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n        // 绘制所有已选区\n        this.selection.forEach(area => {\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n        this.ctx.strokeRect(this.currentSelection.x, this.currentSelection.y, this.currentSelection.width, this.currentSelection.height);\n      }\n    },\n    // 完成绘制选区\n    endDrawing(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const width = endX - this.startX;\n        const height = endY - this.startY;\n        this.selection.push({\n          x: this.startX,\n          y: this.startY,\n          width,\n          height\n        });\n        this.isDrawing = false;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n        // 绘制所有已选区\n        this.selection.forEach(area => {\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n      }\n      this.isDragging = false;\n    },\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    // 获取已选择的区域信息\n    getSelectedAreas() {\n      return this.selection;\n    }\n  }\n};","map":{"version":3,"names":["data","canvasWidth","canvasHeight","image","Image","selection","isDrawing","isDragging","isResizing","startX","startY","currentSelection","ctx","mounted","$refs","canvas","getContext","src","imageSrc","onload","onImageLoad","props","type","String","required","methods","width","height","drawImage","startDrawing","e","rect","getBoundingClientRect","clientX","left","clientY","top","length","forEach","area","x","y","draw","endX","endY","clearCanvas","strokeStyle","lineWidth","strokeRect","deltaX","deltaY","endDrawing","push","clearRect","getSelectedAreas"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas\n      ref=\"canvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousedown=\"startDrawing\"\n      @mousemove=\"draw\"\n      @mouseup=\"endDrawing\"\n      @mouseleave=\"endDrawing\"\n    ></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 图片和画布的大小\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [], // 存储选区数据\n      isDrawing: false, // 标记是否正在绘制\n      isDragging: false, // 标记是否正在拖拽\n      isResizing: false, // 标记是否正在缩放\n      startX: 0,\n      startY: 0,\n      currentSelection: null, // 当前操作的选区\n      ctx: null, // 画布上下文\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\"; // 可以通过props传入图片路径\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {\n    // 图片加载完毕后设置画布尺寸\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0); // 绘制图片到画布\n    },\n\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n\n      // 如果没有选区，则允许开始选区\n      if (this.selection.length === 0) {\n        this.isDrawing = true;\n      } else {\n        // 如果有选区，检查是否点击在选区内\n        this.selection.forEach((area) => {\n          if (\n            this.startX >= area.x &&\n            this.startX <= area.x + area.width &&\n            this.startY >= area.y &&\n            this.startY <= area.y + area.height\n          ) {\n            this.isDragging = true;\n            this.currentSelection = area;\n          }\n        });\n      }\n    },\n\n    // 绘制选区\n    draw(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const width = endX - this.startX;\n        const height = endY - this.startY;\n\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n        // 绘制当前选区\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      } else if (this.isDragging && this.currentSelection) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n\n        const deltaX = endX - this.startX;\n        const deltaY = endY - this.startY;\n\n        // 更新选区的位置\n        this.currentSelection.x += deltaX;\n        this.currentSelection.y += deltaY;\n        this.startX = endX;\n        this.startY = endY;\n\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n        // 绘制所有已选区\n        this.selection.forEach((area) => {\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n        this.ctx.strokeRect(this.currentSelection.x, this.currentSelection.y, this.currentSelection.width, this.currentSelection.height);\n      }\n    },\n\n    // 完成绘制选区\n    endDrawing(e) {\n      if (this.isDrawing) {\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const endX = e.clientX - rect.left;\n        const endY = e.clientY - rect.top;\n        const width = endX - this.startX;\n        const height = endY - this.startY;\n\n        this.selection.push({\n          x: this.startX,\n          y: this.startY,\n          width,\n          height,\n        });\n\n        this.isDrawing = false;\n        this.clearCanvas();\n        this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n        // 绘制所有已选区\n        this.selection.forEach((area) => {\n          this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n        });\n      }\n\n      this.isDragging = false;\n    },\n\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    // 获取已选择的区域信息\n    getSelectedAreas() {\n      return this.selection;\n    },\n  },\n};\n</script>\n\n<style scoped>\ncanvas {\n  border: 1px solid #000;\n  cursor: crosshair;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}