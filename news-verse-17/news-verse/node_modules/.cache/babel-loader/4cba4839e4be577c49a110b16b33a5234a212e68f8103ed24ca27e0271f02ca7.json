{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [],\n      // 存储选区数据\n      isDrawing: false,\n      // 标记是否正在绘制\n      startX: 0,\n      startY: 0,\n      ctx: null,\n      activeSelection: null,\n      // 当前激活的选区（拖动、放大缩小）\n      dragOffsetX: 0,\n      // 拖动时的偏移量\n      dragOffsetY: 0,\n      resizing: false // 标记是否在调整大小\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\";\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    // 图片加载完成后设置画布尺寸\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0);\n    },\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n      this.isDrawing = true;\n    },\n    // 绘制选区\n    draw(e) {\n      if (!this.isDrawing && !this.resizing && !this.activeSelection) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      const width = endX - this.startX;\n      const height = endY - this.startY;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach(area => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n\n      // 如果正在绘制新的区域，显示临时框\n      if (this.isDrawing) {\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      }\n\n      // 如果有激活的选区，进行放大缩小操作\n      if (this.activeSelection && !this.resizing) {\n        this.drawSelection(this.activeSelection);\n      }\n    },\n    // 完成绘制选区\n    endDrawing(e) {\n      if (!this.isDrawing && !this.resizing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      const width = endX - this.startX;\n      const height = endY - this.startY;\n      if (this.isDrawing) {\n        // 新选区的坐标\n        const newSelection = {\n          x: this.startX,\n          y: this.startY,\n          width: width,\n          height: height\n        };\n        this.selection.push(newSelection);\n        this.activeSelection = newSelection; // 激活新选区\n      }\n      this.isDrawing = false;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0);\n      this.selection.forEach(area => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n      if (this.activeSelection) {\n        this.drawSelection(this.activeSelection);\n      }\n    },\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    // 获取已选择的区域信息\n    getSelectedAreas() {\n      return this.selection;\n    },\n    // 绘制选中的区域（包括可调整大小的角）\n    drawSelection(selection) {\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(selection.x, selection.y, selection.width, selection.height);\n\n      // 画出可调整大小的角\n      const resizeSize = 10; // 调整角的大小\n      this.ctx.fillStyle = \"blue\";\n      this.ctx.fillRect(selection.x + selection.width - resizeSize, selection.y + selection.height - resizeSize, resizeSize, resizeSize); // 右下角\n    },\n    // 处理鼠标移动事件\n    handleMouseMove(e) {\n      if (this.resizing) {\n        this.resizeSelection(e);\n      } else if (this.activeSelection) {\n        // 计算鼠标是否在可拖动区域内\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        // 判断是否在选区右下角\n        if (mouseX > this.activeSelection.x + this.activeSelection.width - 10 && mouseX < this.activeSelection.x + this.activeSelection.width && mouseY > this.activeSelection.y + this.activeSelection.height - 10 && mouseY < this.activeSelection.y + this.activeSelection.height) {\n          this.$refs.canvas.style.cursor = \"se-resize\";\n        } else if (mouseX > this.activeSelection.x && mouseX < this.activeSelection.x + this.activeSelection.width && mouseY > this.activeSelection.y && mouseY < this.activeSelection.y + this.activeSelection.height) {\n          this.$refs.canvas.style.cursor = \"move\";\n        } else {\n          this.$refs.canvas.style.cursor = \"default\";\n        }\n      }\n    },\n    // 开始调整选区大小\n    startResize(e) {\n      this.resizing = true;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      // 计算鼠标是否在选区右下角\n      if (mouseX > this.activeSelection.x + this.activeSelection.width - 10 && mouseX < this.activeSelection.x + this.activeSelection.width && mouseY > this.activeSelection.y + this.activeSelection.height - 10 && mouseY < this.activeSelection.y + this.activeSelection.height) {\n        this.dragOffsetX = mouseX - this.activeSelection.x - this.activeSelection.width;\n        this.dragOffsetY = mouseY - this.activeSelection.y - this.activeSelection.height;\n      }\n    },\n    // 调整选区大小\n    resizeSelection(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      const newWidth = mouseX - this.activeSelection.x - this.dragOffsetX;\n      const newHeight = mouseY - this.activeSelection.y - this.dragOffsetY;\n      if (newWidth > 20 && newHeight > 20) {\n        this.activeSelection.width = newWidth;\n        this.activeSelection.height = newHeight;\n      }\n    },\n    // 停止调整大小\n    stopResize() {\n      this.resizing = false;\n    }\n  }\n};","map":{"version":3,"names":["data","canvasWidth","canvasHeight","image","Image","selection","isDrawing","startX","startY","ctx","activeSelection","dragOffsetX","dragOffsetY","resizing","mounted","$refs","canvas","getContext","src","imageSrc","onload","onImageLoad","props","type","String","required","methods","width","height","drawImage","startDrawing","e","rect","getBoundingClientRect","clientX","left","clientY","top","draw","endX","endY","clearCanvas","forEach","area","strokeRect","x","y","strokeStyle","lineWidth","drawSelection","endDrawing","newSelection","push","clearRect","getSelectedAreas","resizeSize","fillStyle","fillRect","handleMouseMove","resizeSelection","mouseX","mouseY","style","cursor","startResize","newWidth","newHeight","stopResize"],"sources":["src/components/ImageSelection.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas\n      ref=\"canvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousedown=\"startDrawing\"\n      @mousemove=\"draw\"\n      @mouseup=\"endDrawing\"\n      @mouseleave=\"endDrawing\"\n      @mousemove=\"handleMouseMove\"\n    ></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      canvasWidth: 0,\n      canvasHeight: 0,\n      image: new Image(),\n      selection: [], // 存储选区数据\n      isDrawing: false, // 标记是否正在绘制\n      startX: 0,\n      startY: 0,\n      ctx: null,\n      activeSelection: null, // 当前激活的选区（拖动、放大缩小）\n      dragOffsetX: 0, // 拖动时的偏移量\n      dragOffsetY: 0,\n      resizing: false, // 标记是否在调整大小\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.image.src = this.imageSrc || \"\";\n    this.image.onload = this.onImageLoad;\n  },\n  props: {\n    imageSrc: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {\n    // 图片加载完成后设置画布尺寸\n    onImageLoad() {\n      this.canvasWidth = this.image.width;\n      this.canvasHeight = this.image.height;\n      this.ctx.drawImage(this.image, 0, 0);\n    },\n\n    // 开始绘制选区\n    startDrawing(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      this.startX = e.clientX - rect.left;\n      this.startY = e.clientY - rect.top;\n      this.isDrawing = true;\n    },\n\n    // 绘制选区\n    draw(e) {\n      if (!this.isDrawing && !this.resizing && !this.activeSelection) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      const width = endX - this.startX;\n      const height = endY - this.startY;\n\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0); // 重新绘制图片\n\n      // 绘制所有已选区\n      this.selection.forEach((area) => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n\n      // 如果正在绘制新的区域，显示临时框\n      if (this.isDrawing) {\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.startX, this.startY, width, height);\n      }\n\n      // 如果有激活的选区，进行放大缩小操作\n      if (this.activeSelection && !this.resizing) {\n        this.drawSelection(this.activeSelection);\n      }\n    },\n\n    // 完成绘制选区\n    endDrawing(e) {\n      if (!this.isDrawing && !this.resizing) return;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n      const width = endX - this.startX;\n      const height = endY - this.startY;\n\n      if (this.isDrawing) {\n        // 新选区的坐标\n        const newSelection = {\n          x: this.startX,\n          y: this.startY,\n          width: width,\n          height: height,\n        };\n        this.selection.push(newSelection);\n        this.activeSelection = newSelection; // 激活新选区\n      }\n\n      this.isDrawing = false;\n      this.clearCanvas();\n      this.ctx.drawImage(this.image, 0, 0);\n      this.selection.forEach((area) => {\n        this.ctx.strokeRect(area.x, area.y, area.width, area.height);\n      });\n      if (this.activeSelection) {\n        this.drawSelection(this.activeSelection);\n      }\n    },\n\n    // 清空画布\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    // 获取已选择的区域信息\n    getSelectedAreas() {\n      return this.selection;\n    },\n\n    // 绘制选中的区域（包括可调整大小的角）\n    drawSelection(selection) {\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(\n        selection.x,\n        selection.y,\n        selection.width,\n        selection.height\n      );\n\n      // 画出可调整大小的角\n      const resizeSize = 10; // 调整角的大小\n      this.ctx.fillStyle = \"blue\";\n      this.ctx.fillRect(\n        selection.x + selection.width - resizeSize,\n        selection.y + selection.height - resizeSize,\n        resizeSize,\n        resizeSize\n      ); // 右下角\n    },\n\n    // 处理鼠标移动事件\n    handleMouseMove(e) {\n      if (this.resizing) {\n        this.resizeSelection(e);\n      } else if (this.activeSelection) {\n        // 计算鼠标是否在可拖动区域内\n        const rect = this.$refs.canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n\n        // 判断是否在选区右下角\n        if (\n          mouseX > this.activeSelection.x + this.activeSelection.width - 10 &&\n          mouseX < this.activeSelection.x + this.activeSelection.width &&\n          mouseY > this.activeSelection.y + this.activeSelection.height - 10 &&\n          mouseY < this.activeSelection.y + this.activeSelection.height\n        ) {\n          this.$refs.canvas.style.cursor = \"se-resize\";\n        } else if (\n          mouseX > this.activeSelection.x &&\n          mouseX < this.activeSelection.x + this.activeSelection.width &&\n          mouseY > this.activeSelection.y &&\n          mouseY < this.activeSelection.y + this.activeSelection.height\n        ) {\n          this.$refs.canvas.style.cursor = \"move\";\n        } else {\n          this.$refs.canvas.style.cursor = \"default\";\n        }\n      }\n    },\n\n    // 开始调整选区大小\n    startResize(e) {\n      this.resizing = true;\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      // 计算鼠标是否在选区右下角\n      if (\n        mouseX > this.activeSelection.x + this.activeSelection.width - 10 &&\n        mouseX < this.activeSelection.x + this.activeSelection.width &&\n        mouseY > this.activeSelection.y + this.activeSelection.height - 10 &&\n        mouseY < this.activeSelection.y + this.activeSelection.height\n      ) {\n        this.dragOffsetX =\n          mouseX - this.activeSelection.x - this.activeSelection.width;\n        this.dragOffsetY =\n          mouseY - this.activeSelection.y - this.activeSelection.height;\n      }\n    },\n\n    // 调整选区大小\n    resizeSelection(e) {\n      const rect = this.$refs.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      const newWidth = mouseX - this.activeSelection.x - this.dragOffsetX;\n      const newHeight = mouseY - this.activeSelection.y - this.dragOffsetY;\n\n      if (newWidth > 20 && newHeight > 20) {\n        this.activeSelection.width = newWidth;\n        this.activeSelection.height = newHeight;\n      }\n    },\n\n    // 停止调整大小\n    stopResize() {\n      this.resizing = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\ncanvas {\n  border: 1px solid #000;\n  cursor: crosshair;\n  position: relative;\n}\n\ncanvas:hover {\n  cursor: default;\n}\n</style>\n"],"mappings":";AAgBA;EACAA,KAAA;IACA;MACAC,WAAA;MACAC,YAAA;MACAC,KAAA,MAAAC,KAAA;MACAC,SAAA;MAAA;MACAC,SAAA;MAAA;MACAC,MAAA;MACAC,MAAA;MACAC,GAAA;MACAC,eAAA;MAAA;MACAC,WAAA;MAAA;MACAC,WAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAL,GAAA,QAAAM,KAAA,CAAAC,MAAA,CAAAC,UAAA;IACA,KAAAd,KAAA,CAAAe,GAAA,QAAAC,QAAA;IACA,KAAAhB,KAAA,CAAAiB,MAAA,QAAAC,WAAA;EACA;EACAC,KAAA;IACAH,QAAA;MACAI,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACA;IACAL,YAAA;MACA,KAAApB,WAAA,QAAAE,KAAA,CAAAwB,KAAA;MACA,KAAAzB,YAAA,QAAAC,KAAA,CAAAyB,MAAA;MACA,KAAAnB,GAAA,CAAAoB,SAAA,MAAA1B,KAAA;IACA;IAEA;IACA2B,aAAAC,CAAA;MACA,MAAAC,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;MACA,KAAA1B,MAAA,GAAAwB,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;MACA,KAAA3B,MAAA,GAAAuB,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;MACA,KAAA/B,SAAA;IACA;IAEA;IACAgC,KAAAP,CAAA;MACA,UAAAzB,SAAA,UAAAO,QAAA,UAAAH,eAAA;MACA,MAAAsB,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;MACA,MAAAM,IAAA,GAAAR,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;MACA,MAAAK,IAAA,GAAAT,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;MACA,MAAAV,KAAA,GAAAY,IAAA,QAAAhC,MAAA;MACA,MAAAqB,MAAA,GAAAY,IAAA,QAAAhC,MAAA;MAEA,KAAAiC,WAAA;MACA,KAAAhC,GAAA,CAAAoB,SAAA,MAAA1B,KAAA;;MAEA;MACA,KAAAE,SAAA,CAAAqC,OAAA,CAAAC,IAAA;QACA,KAAAlC,GAAA,CAAAmC,UAAA,CAAAD,IAAA,CAAAE,CAAA,EAAAF,IAAA,CAAAG,CAAA,EAAAH,IAAA,CAAAhB,KAAA,EAAAgB,IAAA,CAAAf,MAAA;MACA;;MAEA;MACA,SAAAtB,SAAA;QACA,KAAAG,GAAA,CAAAsC,WAAA;QACA,KAAAtC,GAAA,CAAAuC,SAAA;QACA,KAAAvC,GAAA,CAAAmC,UAAA,MAAArC,MAAA,OAAAC,MAAA,EAAAmB,KAAA,EAAAC,MAAA;MACA;;MAEA;MACA,SAAAlB,eAAA,UAAAG,QAAA;QACA,KAAAoC,aAAA,MAAAvC,eAAA;MACA;IACA;IAEA;IACAwC,WAAAnB,CAAA;MACA,UAAAzB,SAAA,UAAAO,QAAA;MACA,MAAAmB,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;MACA,MAAAM,IAAA,GAAAR,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;MACA,MAAAK,IAAA,GAAAT,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;MACA,MAAAV,KAAA,GAAAY,IAAA,QAAAhC,MAAA;MACA,MAAAqB,MAAA,GAAAY,IAAA,QAAAhC,MAAA;MAEA,SAAAF,SAAA;QACA;QACA,MAAA6C,YAAA;UACAN,CAAA,OAAAtC,MAAA;UACAuC,CAAA,OAAAtC,MAAA;UACAmB,KAAA,EAAAA,KAAA;UACAC,MAAA,EAAAA;QACA;QACA,KAAAvB,SAAA,CAAA+C,IAAA,CAAAD,YAAA;QACA,KAAAzC,eAAA,GAAAyC,YAAA;MACA;MAEA,KAAA7C,SAAA;MACA,KAAAmC,WAAA;MACA,KAAAhC,GAAA,CAAAoB,SAAA,MAAA1B,KAAA;MACA,KAAAE,SAAA,CAAAqC,OAAA,CAAAC,IAAA;QACA,KAAAlC,GAAA,CAAAmC,UAAA,CAAAD,IAAA,CAAAE,CAAA,EAAAF,IAAA,CAAAG,CAAA,EAAAH,IAAA,CAAAhB,KAAA,EAAAgB,IAAA,CAAAf,MAAA;MACA;MACA,SAAAlB,eAAA;QACA,KAAAuC,aAAA,MAAAvC,eAAA;MACA;IACA;IAEA;IACA+B,YAAA;MACA,KAAAhC,GAAA,CAAA4C,SAAA,YAAApD,WAAA,OAAAC,YAAA;IACA;IAEA;IACAoD,iBAAA;MACA,YAAAjD,SAAA;IACA;IAEA;IACA4C,cAAA5C,SAAA;MACA,KAAAI,GAAA,CAAAsC,WAAA;MACA,KAAAtC,GAAA,CAAAuC,SAAA;MACA,KAAAvC,GAAA,CAAAmC,UAAA,CACAvC,SAAA,CAAAwC,CAAA,EACAxC,SAAA,CAAAyC,CAAA,EACAzC,SAAA,CAAAsB,KAAA,EACAtB,SAAA,CAAAuB,MACA;;MAEA;MACA,MAAA2B,UAAA;MACA,KAAA9C,GAAA,CAAA+C,SAAA;MACA,KAAA/C,GAAA,CAAAgD,QAAA,CACApD,SAAA,CAAAwC,CAAA,GAAAxC,SAAA,CAAAsB,KAAA,GAAA4B,UAAA,EACAlD,SAAA,CAAAyC,CAAA,GAAAzC,SAAA,CAAAuB,MAAA,GAAA2B,UAAA,EACAA,UAAA,EACAA,UACA;IACA;IAEA;IACAG,gBAAA3B,CAAA;MACA,SAAAlB,QAAA;QACA,KAAA8C,eAAA,CAAA5B,CAAA;MACA,gBAAArB,eAAA;QACA;QACA,MAAAsB,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;QACA,MAAA2B,MAAA,GAAA7B,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;QACA,MAAA0B,MAAA,GAAA9B,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;;QAEA;QACA,IACAuB,MAAA,QAAAlD,eAAA,CAAAmC,CAAA,QAAAnC,eAAA,CAAAiB,KAAA,SACAiC,MAAA,QAAAlD,eAAA,CAAAmC,CAAA,QAAAnC,eAAA,CAAAiB,KAAA,IACAkC,MAAA,QAAAnD,eAAA,CAAAoC,CAAA,QAAApC,eAAA,CAAAkB,MAAA,SACAiC,MAAA,QAAAnD,eAAA,CAAAoC,CAAA,QAAApC,eAAA,CAAAkB,MAAA,EACA;UACA,KAAAb,KAAA,CAAAC,MAAA,CAAA8C,KAAA,CAAAC,MAAA;QACA,WACAH,MAAA,QAAAlD,eAAA,CAAAmC,CAAA,IACAe,MAAA,QAAAlD,eAAA,CAAAmC,CAAA,QAAAnC,eAAA,CAAAiB,KAAA,IACAkC,MAAA,QAAAnD,eAAA,CAAAoC,CAAA,IACAe,MAAA,QAAAnD,eAAA,CAAAoC,CAAA,QAAApC,eAAA,CAAAkB,MAAA,EACA;UACA,KAAAb,KAAA,CAAAC,MAAA,CAAA8C,KAAA,CAAAC,MAAA;QACA;UACA,KAAAhD,KAAA,CAAAC,MAAA,CAAA8C,KAAA,CAAAC,MAAA;QACA;MACA;IACA;IAEA;IACAC,YAAAjC,CAAA;MACA,KAAAlB,QAAA;MACA,MAAAmB,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;MACA,MAAA2B,MAAA,GAAA7B,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;MACA,MAAA0B,MAAA,GAAA9B,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;;MAEA;MACA,IACAuB,MAAA,QAAAlD,eAAA,CAAAmC,CAAA,QAAAnC,eAAA,CAAAiB,KAAA,SACAiC,MAAA,QAAAlD,eAAA,CAAAmC,CAAA,QAAAnC,eAAA,CAAAiB,KAAA,IACAkC,MAAA,QAAAnD,eAAA,CAAAoC,CAAA,QAAApC,eAAA,CAAAkB,MAAA,SACAiC,MAAA,QAAAnD,eAAA,CAAAoC,CAAA,QAAApC,eAAA,CAAAkB,MAAA,EACA;QACA,KAAAjB,WAAA,GACAiD,MAAA,QAAAlD,eAAA,CAAAmC,CAAA,QAAAnC,eAAA,CAAAiB,KAAA;QACA,KAAAf,WAAA,GACAiD,MAAA,QAAAnD,eAAA,CAAAoC,CAAA,QAAApC,eAAA,CAAAkB,MAAA;MACA;IACA;IAEA;IACA+B,gBAAA5B,CAAA;MACA,MAAAC,IAAA,QAAAjB,KAAA,CAAAC,MAAA,CAAAiB,qBAAA;MACA,MAAA2B,MAAA,GAAA7B,CAAA,CAAAG,OAAA,GAAAF,IAAA,CAAAG,IAAA;MACA,MAAA0B,MAAA,GAAA9B,CAAA,CAAAK,OAAA,GAAAJ,IAAA,CAAAK,GAAA;MAEA,MAAA4B,QAAA,GAAAL,MAAA,QAAAlD,eAAA,CAAAmC,CAAA,QAAAlC,WAAA;MACA,MAAAuD,SAAA,GAAAL,MAAA,QAAAnD,eAAA,CAAAoC,CAAA,QAAAlC,WAAA;MAEA,IAAAqD,QAAA,SAAAC,SAAA;QACA,KAAAxD,eAAA,CAAAiB,KAAA,GAAAsC,QAAA;QACA,KAAAvD,eAAA,CAAAkB,MAAA,GAAAsC,SAAA;MACA;IACA;IAEA;IACAC,WAAA;MACA,KAAAtD,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}